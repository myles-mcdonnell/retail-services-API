/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nedap.Retail.Api.Idcloud.Client;
using Nedap.Retail.Api.Idcloud.Model;

namespace Nedap.Retail.Api.Idcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or replace article(s)
        /// </summary>
        /// <remarks>
        /// Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns></returns>
        void ArticleCreateOrReplace (Articles articles);

        /// <summary>
        /// Create or replace article(s)
        /// </summary>
        /// <remarks>
        /// Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArticleCreateOrReplaceWithHttpInfo (Articles articles);
        /// <summary>
        /// Delete articles
        /// </summary>
        /// <remarks>
        /// Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns></returns>
        void ArticleDelete (List<string> gtins);

        /// <summary>
        /// Delete articles
        /// </summary>
        /// <remarks>
        /// Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArticleDeleteWithHttpInfo (List<string> gtins);
        /// <summary>
        /// Delete all articles
        /// </summary>
        /// <remarks>
        /// Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ArticleDeleteAll ();

        /// <summary>
        /// Delete all articles
        /// </summary>
        /// <remarks>
        /// Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArticleDeleteAllWithHttpInfo ();
        /// <summary>
        /// Find articles using search query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>ArticleFindResponse</returns>
        ArticleFindResponse ArticleFind (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null);

        /// <summary>
        /// Find articles using search query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>ApiResponse of ArticleFindResponse</returns>
        ApiResponse<ArticleFindResponse> ArticleFindWithHttpInfo (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null);
        /// <summary>
        /// Get quantity of articles
        /// </summary>
        /// <remarks>
        /// Returns the total number of articles registered in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>QuantityResponse</returns>
        QuantityResponse ArticleQuantity ();

        /// <summary>
        /// Get quantity of articles
        /// </summary>
        /// <remarks>
        /// Returns the total number of articles registered in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of QuantityResponse</returns>
        ApiResponse<QuantityResponse> ArticleQuantityWithHttpInfo ();
        /// <summary>
        /// Get articles
        /// </summary>
        /// <remarks>
        /// Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>List&lt;Article&gt;</returns>
        List<Article> ArticleRetrieve (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null);

        /// <summary>
        /// Get articles
        /// </summary>
        /// <remarks>
        /// Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>ApiResponse of List&lt;Article&gt;</returns>
        ApiResponse<List<Article>> ArticleRetrieveWithHttpInfo (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create or replace article(s)
        /// </summary>
        /// <remarks>
        /// Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArticleCreateOrReplaceAsync (Articles articles);

        /// <summary>
        /// Create or replace article(s)
        /// </summary>
        /// <remarks>
        /// Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArticleCreateOrReplaceAsyncWithHttpInfo (Articles articles);
        /// <summary>
        /// Delete articles
        /// </summary>
        /// <remarks>
        /// Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArticleDeleteAsync (List<string> gtins);

        /// <summary>
        /// Delete articles
        /// </summary>
        /// <remarks>
        /// Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArticleDeleteAsyncWithHttpInfo (List<string> gtins);
        /// <summary>
        /// Delete all articles
        /// </summary>
        /// <remarks>
        /// Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArticleDeleteAllAsync ();

        /// <summary>
        /// Delete all articles
        /// </summary>
        /// <remarks>
        /// Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArticleDeleteAllAsyncWithHttpInfo ();
        /// <summary>
        /// Find articles using search query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>Task of ArticleFindResponse</returns>
        System.Threading.Tasks.Task<ArticleFindResponse> ArticleFindAsync (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null);

        /// <summary>
        /// Find articles using search query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>Task of ApiResponse (ArticleFindResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleFindResponse>> ArticleFindAsyncWithHttpInfo (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null);
        /// <summary>
        /// Get quantity of articles
        /// </summary>
        /// <remarks>
        /// Returns the total number of articles registered in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of QuantityResponse</returns>
        System.Threading.Tasks.Task<QuantityResponse> ArticleQuantityAsync ();

        /// <summary>
        /// Get quantity of articles
        /// </summary>
        /// <remarks>
        /// Returns the total number of articles registered in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (QuantityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuantityResponse>> ArticleQuantityAsyncWithHttpInfo ();
        /// <summary>
        /// Get articles
        /// </summary>
        /// <remarks>
        /// Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>Task of List&lt;Article&gt;</returns>
        System.Threading.Tasks.Task<List<Article>> ArticleRetrieveAsync (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null);

        /// <summary>
        /// Get articles
        /// </summary>
        /// <remarks>
        /// Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Article&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Article>>> ArticleRetrieveAsyncWithHttpInfo (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArticleApi : IArticleApi
    {
        private Nedap.Retail.Api.Idcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticleApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArticleApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nedap.Retail.Api.Idcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create or replace article(s) Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns></returns>
        public void ArticleCreateOrReplace (Articles articles)
        {
             ArticleCreateOrReplaceWithHttpInfo(articles);
        }

        /// <summary>
        /// Create or replace article(s) Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArticleCreateOrReplaceWithHttpInfo (Articles articles)
        {
            // verify the required parameter 'articles' is set
            if (articles == null)
                throw new ApiException(400, "Missing required parameter 'articles' when calling ArticleApi->ArticleCreateOrReplace");

            var localVarPath = "/article/v2/create_or_replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articles != null && articles.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(articles); // http body (model) parameter
            }
            else
            {
                localVarPostBody = articles; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleCreateOrReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or replace article(s) Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArticleCreateOrReplaceAsync (Articles articles)
        {
             await ArticleCreateOrReplaceAsyncWithHttpInfo(articles);

        }

        /// <summary>
        /// Create or replace article(s) Create or replace article(s) in !D Cloud. Replacing will happen based on GTIN, which is the primary key.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articles">An array of articles that should be created or replaced.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArticleCreateOrReplaceAsyncWithHttpInfo (Articles articles)
        {
            // verify the required parameter 'articles' is set
            if (articles == null)
                throw new ApiException(400, "Missing required parameter 'articles' when calling ArticleApi->ArticleCreateOrReplace");

            var localVarPath = "/article/v2/create_or_replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (articles != null && articles.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(articles); // http body (model) parameter
            }
            else
            {
                localVarPostBody = articles; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleCreateOrReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete articles Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns></returns>
        public void ArticleDelete (List<string> gtins)
        {
             ArticleDeleteWithHttpInfo(gtins);
        }

        /// <summary>
        /// Delete articles Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArticleDeleteWithHttpInfo (List<string> gtins)
        {
            // verify the required parameter 'gtins' is set
            if (gtins == null)
                throw new ApiException(400, "Missing required parameter 'gtins' when calling ArticleApi->ArticleDelete");

            var localVarPath = "/article/v3/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gtins != null && gtins.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gtins); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gtins; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete articles Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArticleDeleteAsync (List<string> gtins)
        {
             await ArticleDeleteAsyncWithHttpInfo(gtins);

        }

        /// <summary>
        /// Delete articles Delete specified articles from the database. This cannot be undone! Please note the articles are not  deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">GTIN(s) to delete. Repeat key-value for deleting multiple articles. If empty or not specified, all articles are deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArticleDeleteAsyncWithHttpInfo (List<string> gtins)
        {
            // verify the required parameter 'gtins' is set
            if (gtins == null)
                throw new ApiException(400, "Missing required parameter 'gtins' when calling ArticleApi->ArticleDelete");

            var localVarPath = "/article/v3/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gtins != null && gtins.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gtins); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gtins; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all articles Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ArticleDeleteAll ()
        {
             ArticleDeleteAllWithHttpInfo();
        }

        /// <summary>
        /// Delete all articles Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArticleDeleteAllWithHttpInfo ()
        {

            var localVarPath = "/article/v3/delete_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleDeleteAll", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all articles Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArticleDeleteAllAsync ()
        {
             await ArticleDeleteAllAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all articles Delete all articles from the database. This cannot be undone! Please note the articles are not deleted from the !D Cloud mobile apps. To do that, reset the app and re-register using the QR code.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArticleDeleteAllAsyncWithHttpInfo ()
        {

            var localVarPath = "/article/v3/delete_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleDeleteAll", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find articles using search query 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>ArticleFindResponse</returns>
        public ArticleFindResponse ArticleFind (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null)
        {
             ApiResponse<ArticleFindResponse> localVarResponse = ArticleFindWithHttpInfo(query, count, skip, externRef, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find articles using search query 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>ApiResponse of ArticleFindResponse</returns>
        public ApiResponse< ArticleFindResponse > ArticleFindWithHttpInfo (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null)
        {

            var localVarPath = "/article/v2/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (externRef != null) localVarQueryParams.Add("extern_ref", Configuration.ApiClient.ParameterToString(externRef)); // query parameter
            if (order != null) localVarQueryParams.Add("order[]", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleFindResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleFindResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleFindResponse)));
            
        }

        /// <summary>
        /// Find articles using search query 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>Task of ArticleFindResponse</returns>
        public async System.Threading.Tasks.Task<ArticleFindResponse> ArticleFindAsync (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null)
        {
             ApiResponse<ArticleFindResponse> localVarResponse = await ArticleFindAsyncWithHttpInfo(query, count, skip, externRef, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find articles using search query 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query. (optional, default to *)</param>
        /// <param name="count">Return this number of articles. (optional, default to 100)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional, default to 0)</param>
        /// <param name="externRef">This can be used to match requests with responses from the server (for example, Ajax requests are asynchronous and thus can return out of sequence). (optional)</param>
        /// <param name="order">Column to which ordering should be applied. When omitted: default order wil be based on score. (optional)</param>
        /// <returns>Task of ApiResponse (ArticleFindResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArticleFindResponse>> ArticleFindAsyncWithHttpInfo (string query = null, int? count = null, int? skip = null, long? externRef = null, List<string> order = null)
        {

            var localVarPath = "/article/v2/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (externRef != null) localVarQueryParams.Add("extern_ref", Configuration.ApiClient.ParameterToString(externRef)); // query parameter
            if (order != null) localVarQueryParams.Add("order[]", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArticleFindResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArticleFindResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArticleFindResponse)));
            
        }

        /// <summary>
        /// Get quantity of articles Returns the total number of articles registered in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>QuantityResponse</returns>
        public QuantityResponse ArticleQuantity ()
        {
             ApiResponse<QuantityResponse> localVarResponse = ArticleQuantityWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get quantity of articles Returns the total number of articles registered in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of QuantityResponse</returns>
        public ApiResponse< QuantityResponse > ArticleQuantityWithHttpInfo ()
        {

            var localVarPath = "/article/v2/quantity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleQuantity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuantityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuantityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuantityResponse)));
            
        }

        /// <summary>
        /// Get quantity of articles Returns the total number of articles registered in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of QuantityResponse</returns>
        public async System.Threading.Tasks.Task<QuantityResponse> ArticleQuantityAsync ()
        {
             ApiResponse<QuantityResponse> localVarResponse = await ArticleQuantityAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get quantity of articles Returns the total number of articles registered in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (QuantityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuantityResponse>> ArticleQuantityAsyncWithHttpInfo ()
        {

            var localVarPath = "/article/v2/quantity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleQuantity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuantityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuantityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuantityResponse)));
            
        }

        /// <summary>
        /// Get articles Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>List&lt;Article&gt;</returns>
        public List<Article> ArticleRetrieve (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null)
        {
             ApiResponse<List<Article>> localVarResponse = ArticleRetrieveWithHttpInfo(gtins, barcodes, updatedAfter, skip, count, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get articles Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>ApiResponse of List&lt;Article&gt;</returns>
        public ApiResponse< List<Article> > ArticleRetrieveWithHttpInfo (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null)
        {

            var localVarPath = "/article/v2/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gtins != null) localVarQueryParams.Add("gtins[]", Configuration.ApiClient.ParameterToString(gtins)); // query parameter
            if (barcodes != null) localVarQueryParams.Add("barcodes[]", Configuration.ApiClient.ParameterToString(barcodes)); // query parameter
            if (updatedAfter != null) localVarQueryParams.Add("updated_after", Configuration.ApiClient.ParameterToString(updatedAfter)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields[]", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Article>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Article>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Article>)));
            
        }

        /// <summary>
        /// Get articles Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>Task of List&lt;Article&gt;</returns>
        public async System.Threading.Tasks.Task<List<Article>> ArticleRetrieveAsync (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null)
        {
             ApiResponse<List<Article>> localVarResponse = await ArticleRetrieveAsyncWithHttpInfo(gtins, barcodes, updatedAfter, skip, count, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get articles Retrieve articles. There are three ways to call this endpoint:  1) specify gtins,  2) specify barcodes, or  3) specify updated_after, skip and count.  You can not mix these sets: skip and count have no meaning when specifying gtins or barcodes, and combining gtins and updated_after also doesn&#39;t work.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gtins">The GTIN(s) of which article information should be returned. Repeat key-value for retrieving multiple GTINs. Mutually exclusive with barcodes[] and updated_after. (optional)</param>
        /// <param name="barcodes">The barcode(s) of which article information should be returned. Repeat key-value for retrieving multiple barcodes. Mutually exclusive with gtins[] and updated_after. (optional)</param>
        /// <param name="updatedAfter">Articles updated on or after this time. When omitted: return all Article objects since 1 january 1970. (optional)</param>
        /// <param name="skip">Skip this number of articles. When omitted: skip none. (optional)</param>
        /// <param name="count">Return this number of articles. The maximum number of returned articles is limited at 50.000. When omitted: return 100 Article objects. (optional)</param>
        /// <param name="fields">Which fields should be included in the response. Can be any of the Article fields. When omitted: all fields will be included in the response. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Article&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Article>>> ArticleRetrieveAsyncWithHttpInfo (List<string> gtins = null, List<string> barcodes = null, DateTime? updatedAfter = null, int? skip = null, int? count = null, List<string> fields = null)
        {

            var localVarPath = "/article/v2/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gtins != null) localVarQueryParams.Add("gtins[]", Configuration.ApiClient.ParameterToString(gtins)); // query parameter
            if (barcodes != null) localVarQueryParams.Add("barcodes[]", Configuration.ApiClient.ParameterToString(barcodes)); // query parameter
            if (updatedAfter != null) localVarQueryParams.Add("updated_after", Configuration.ApiClient.ParameterToString(updatedAfter)); // query parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields[]", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArticleRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Article>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Article>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Article>)));
            
        }

    }
}
