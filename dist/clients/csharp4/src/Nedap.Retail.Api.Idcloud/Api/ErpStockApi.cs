/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nedap.Retail.Api.Idcloud.Client;
using Nedap.Retail.Api.Idcloud.Model;

namespace Nedap.Retail.Api.Idcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IErpStockApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create ERP stock
        /// </summary>
        /// <remarks>
        /// Create an ERP stock.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>ErpStockCreateResponse</returns>
        ErpStockCreateResponse ErpStockCreate (Stock eRPStock);

        /// <summary>
        /// Create ERP stock
        /// </summary>
        /// <remarks>
        /// Create an ERP stock.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>ApiResponse of ErpStockCreateResponse</returns>
        ApiResponse<ErpStockCreateResponse> ErpStockCreateWithHttpInfo (Stock eRPStock);
        /// <summary>
        /// Get ERP stock summaries
        /// </summary>
        /// <remarks>
        /// Retrieves ERP stock summary list for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>List&lt;StockSummary&gt;</returns>
        List<StockSummary> ErpStockList (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null);

        /// <summary>
        /// Get ERP stock summaries
        /// </summary>
        /// <remarks>
        /// Retrieves ERP stock summary list for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>ApiResponse of List&lt;StockSummary&gt;</returns>
        ApiResponse<List<StockSummary>> ErpStockListWithHttpInfo (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null);
        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>Stock</returns>
        Stock ErpStockRetrieve (string id, bool? withExcluded = null);

        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>ApiResponse of Stock</returns>
        ApiResponse<Stock> ErpStockRetrieveWithHttpInfo (string id, bool? withExcluded = null);
        /// <summary>
        /// Retrieve ERP stock summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>StockSummary</returns>
        StockSummary ErpStockRetrieveSummary (string id);

        /// <summary>
        /// Retrieve ERP stock summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>ApiResponse of StockSummary</returns>
        ApiResponse<StockSummary> ErpStockRetrieveSummaryWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create ERP stock
        /// </summary>
        /// <remarks>
        /// Create an ERP stock.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>Task of ErpStockCreateResponse</returns>
        System.Threading.Tasks.Task<ErpStockCreateResponse> ErpStockCreateAsync (Stock eRPStock);

        /// <summary>
        /// Create ERP stock
        /// </summary>
        /// <remarks>
        /// Create an ERP stock.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>Task of ApiResponse (ErpStockCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErpStockCreateResponse>> ErpStockCreateAsyncWithHttpInfo (Stock eRPStock);
        /// <summary>
        /// Get ERP stock summaries
        /// </summary>
        /// <remarks>
        /// Retrieves ERP stock summary list for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>Task of List&lt;StockSummary&gt;</returns>
        System.Threading.Tasks.Task<List<StockSummary>> ErpStockListAsync (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null);

        /// <summary>
        /// Get ERP stock summaries
        /// </summary>
        /// <remarks>
        /// Retrieves ERP stock summary list for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StockSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StockSummary>>> ErpStockListAsyncWithHttpInfo (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null);
        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>Task of Stock</returns>
        System.Threading.Tasks.Task<Stock> ErpStockRetrieveAsync (string id, bool? withExcluded = null);

        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Stock)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stock>> ErpStockRetrieveAsyncWithHttpInfo (string id, bool? withExcluded = null);
        /// <summary>
        /// Retrieve ERP stock summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>Task of StockSummary</returns>
        System.Threading.Tasks.Task<StockSummary> ErpStockRetrieveSummaryAsync (string id);

        /// <summary>
        /// Retrieve ERP stock summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>Task of ApiResponse (StockSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<StockSummary>> ErpStockRetrieveSummaryAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ErpStockApi : IErpStockApi
    {
        private Nedap.Retail.Api.Idcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ErpStockApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ErpStockApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ErpStockApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ErpStockApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nedap.Retail.Api.Idcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create ERP stock Create an ERP stock.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>ErpStockCreateResponse</returns>
        public ErpStockCreateResponse ErpStockCreate (Stock eRPStock)
        {
             ApiResponse<ErpStockCreateResponse> localVarResponse = ErpStockCreateWithHttpInfo(eRPStock);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create ERP stock Create an ERP stock.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>ApiResponse of ErpStockCreateResponse</returns>
        public ApiResponse< ErpStockCreateResponse > ErpStockCreateWithHttpInfo (Stock eRPStock)
        {
            // verify the required parameter 'eRPStock' is set
            if (eRPStock == null)
                throw new ApiException(400, "Missing required parameter 'eRPStock' when calling ErpStockApi->ErpStockCreate");

            var localVarPath = "/erp_stock/v1/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eRPStock != null && eRPStock.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eRPStock); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eRPStock; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErpStockCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErpStockCreateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErpStockCreateResponse)));
            
        }

        /// <summary>
        /// Create ERP stock Create an ERP stock.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>Task of ErpStockCreateResponse</returns>
        public async System.Threading.Tasks.Task<ErpStockCreateResponse> ErpStockCreateAsync (Stock eRPStock)
        {
             ApiResponse<ErpStockCreateResponse> localVarResponse = await ErpStockCreateAsyncWithHttpInfo(eRPStock);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create ERP stock Create an ERP stock.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eRPStock">The ERP stock to store.</param>
        /// <returns>Task of ApiResponse (ErpStockCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ErpStockCreateResponse>> ErpStockCreateAsyncWithHttpInfo (Stock eRPStock)
        {
            // verify the required parameter 'eRPStock' is set
            if (eRPStock == null)
                throw new ApiException(400, "Missing required parameter 'eRPStock' when calling ErpStockApi->ErpStockCreate");

            var localVarPath = "/erp_stock/v1/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eRPStock != null && eRPStock.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eRPStock); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eRPStock; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ErpStockCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ErpStockCreateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ErpStockCreateResponse)));
            
        }

        /// <summary>
        /// Get ERP stock summaries Retrieves ERP stock summary list for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>List&lt;StockSummary&gt;</returns>
        public List<StockSummary> ErpStockList (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {
             ApiResponse<List<StockSummary>> localVarResponse = ErpStockListWithHttpInfo(location, fromEventTime, untilEventTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERP stock summaries Retrieves ERP stock summary list for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>ApiResponse of List&lt;StockSummary&gt;</returns>
        public ApiResponse< List<StockSummary> > ErpStockListWithHttpInfo (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling ErpStockApi->ErpStockList");

            var localVarPath = "/erp_stock/v1/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (fromEventTime != null) localVarQueryParams.Add("from_event_time", Configuration.ApiClient.ParameterToString(fromEventTime)); // query parameter
            if (untilEventTime != null) localVarQueryParams.Add("until_event_time", Configuration.ApiClient.ParameterToString(untilEventTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StockSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StockSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StockSummary>)));
            
        }

        /// <summary>
        /// Get ERP stock summaries Retrieves ERP stock summary list for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>Task of List&lt;StockSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<StockSummary>> ErpStockListAsync (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {
             ApiResponse<List<StockSummary>> localVarResponse = await ErpStockListAsyncWithHttpInfo(location, fromEventTime, untilEventTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ERP stock summaries Retrieves ERP stock summary list for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location for which the stock is defined.</param>
        /// <param name="fromEventTime">Retrieve the ERP stock summaries from this time. (optional)</param>
        /// <param name="untilEventTime">Retrieve the ERP stock summaries until this time. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StockSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StockSummary>>> ErpStockListAsyncWithHttpInfo (string location, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling ErpStockApi->ErpStockList");

            var localVarPath = "/erp_stock/v1/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (fromEventTime != null) localVarQueryParams.Add("from_event_time", Configuration.ApiClient.ParameterToString(fromEventTime)); // query parameter
            if (untilEventTime != null) localVarQueryParams.Add("until_event_time", Configuration.ApiClient.ParameterToString(untilEventTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StockSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StockSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StockSummary>)));
            
        }

        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>Stock</returns>
        public Stock ErpStockRetrieve (string id, bool? withExcluded = null)
        {
             ApiResponse<Stock> localVarResponse = ErpStockRetrieveWithHttpInfo(id, withExcluded);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>ApiResponse of Stock</returns>
        public ApiResponse< Stock > ErpStockRetrieveWithHttpInfo (string id, bool? withExcluded = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ErpStockApi->ErpStockRetrieve");

            var localVarPath = "/erp_stock/v1/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (withExcluded != null) localVarQueryParams.Add("with_excluded", Configuration.ApiClient.ParameterToString(withExcluded)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stock) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stock)));
            
        }

        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>Task of Stock</returns>
        public async System.Threading.Tasks.Task<Stock> ErpStockRetrieveAsync (string id, bool? withExcluded = null)
        {
             ApiResponse<Stock> localVarResponse = await ErpStockRetrieveAsyncWithHttpInfo(id, withExcluded);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of GTINs and quantities for a certain ERP stock. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock to retrieve.</param>
        /// <param name="withExcluded">Boolean parameter that indicates if we want to include excluded GTINs from ERP stock. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Stock)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stock>> ErpStockRetrieveAsyncWithHttpInfo (string id, bool? withExcluded = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ErpStockApi->ErpStockRetrieve");

            var localVarPath = "/erp_stock/v1/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (withExcluded != null) localVarQueryParams.Add("with_excluded", Configuration.ApiClient.ParameterToString(withExcluded)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stock) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stock)));
            
        }

        /// <summary>
        /// Retrieve ERP stock summary. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>StockSummary</returns>
        public StockSummary ErpStockRetrieveSummary (string id)
        {
             ApiResponse<StockSummary> localVarResponse = ErpStockRetrieveSummaryWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve ERP stock summary. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>ApiResponse of StockSummary</returns>
        public ApiResponse< StockSummary > ErpStockRetrieveSummaryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ErpStockApi->ErpStockRetrieveSummary");

            var localVarPath = "/erp_stock/v1/retrieve_summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockRetrieveSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StockSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StockSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StockSummary)));
            
        }

        /// <summary>
        /// Retrieve ERP stock summary. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>Task of StockSummary</returns>
        public async System.Threading.Tasks.Task<StockSummary> ErpStockRetrieveSummaryAsync (string id)
        {
             ApiResponse<StockSummary> localVarResponse = await ErpStockRetrieveSummaryAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve ERP stock summary. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ERP stock summary to retrieve.</param>
        /// <returns>Task of ApiResponse (StockSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StockSummary>> ErpStockRetrieveSummaryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ErpStockApi->ErpStockRetrieveSummary");

            var localVarPath = "/erp_stock/v1/retrieve_summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErpStockRetrieveSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StockSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StockSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StockSummary)));
            
        }

    }
}
