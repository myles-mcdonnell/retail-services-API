/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nedap.Retail.Api.Idcloud.Client;
using Nedap.Retail.Api.Idcloud.Model;

namespace Nedap.Retail.Api.Idcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud.
        /// </summary>
        /// <remarks>
        /// Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns></returns>
        void Capture (Shipment shipmentNotice);

        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud.
        /// </summary>
        /// <remarks>
        /// Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CaptureWithHttpInfo (Shipment shipmentNotice);
        /// <summary>
        /// Deletes a shipment notice from !D Cloud.
        /// </summary>
        /// <remarks>
        /// If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns></returns>
        void Delete (string parentId);

        /// <summary>
        /// Deletes a shipment notice from !D Cloud.
        /// </summary>
        /// <remarks>
        /// If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string parentId);
        /// <summary>
        /// Retrieves a list of shipment summaries.
        /// </summary>
        /// <remarks>
        /// Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>List&lt;ShipmentSummary&gt;</returns>
        List<ShipmentSummary> List (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null);

        /// <summary>
        /// Retrieves a list of shipment summaries.
        /// </summary>
        /// <remarks>
        /// Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>ApiResponse of List&lt;ShipmentSummary&gt;</returns>
        ApiResponse<List<ShipmentSummary>> ListWithHttpInfo (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null);
        /// <summary>
        /// Retrieves a shipment from !D Cloud.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>Shipment</returns>
        Shipment Retrieve (string parentId, bool? includeArticles = null);

        /// <summary>
        /// Retrieves a shipment from !D Cloud.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> RetrieveWithHttpInfo (string parentId, bool? includeArticles = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud.
        /// </summary>
        /// <remarks>
        /// Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CaptureAsync (Shipment shipmentNotice);

        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud.
        /// </summary>
        /// <remarks>
        /// Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CaptureAsyncWithHttpInfo (Shipment shipmentNotice);
        /// <summary>
        /// Deletes a shipment notice from !D Cloud.
        /// </summary>
        /// <remarks>
        /// If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string parentId);

        /// <summary>
        /// Deletes a shipment notice from !D Cloud.
        /// </summary>
        /// <remarks>
        /// If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string parentId);
        /// <summary>
        /// Retrieves a list of shipment summaries.
        /// </summary>
        /// <remarks>
        /// Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>Task of List&lt;ShipmentSummary&gt;</returns>
        System.Threading.Tasks.Task<List<ShipmentSummary>> ListAsync (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null);

        /// <summary>
        /// Retrieves a list of shipment summaries.
        /// </summary>
        /// <remarks>
        /// Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ShipmentSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ShipmentSummary>>> ListAsyncWithHttpInfo (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null);
        /// <summary>
        /// Retrieves a shipment from !D Cloud.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>Task of Shipment</returns>
        System.Threading.Tasks.Task<Shipment> RetrieveAsync (string parentId, bool? includeArticles = null);

        /// <summary>
        /// Retrieves a shipment from !D Cloud.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipment>> RetrieveAsyncWithHttpInfo (string parentId, bool? includeArticles = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentApi : IShipmentApi
    {
        private Nedap.Retail.Api.Idcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nedap.Retail.Api.Idcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud. Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns></returns>
        public void Capture (Shipment shipmentNotice)
        {
             CaptureWithHttpInfo(shipmentNotice);
        }

        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud. Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CaptureWithHttpInfo (Shipment shipmentNotice)
        {
            // verify the required parameter 'shipmentNotice' is set
            if (shipmentNotice == null)
                throw new ApiException(400, "Missing required parameter 'shipmentNotice' when calling ShipmentApi->Capture");

            var localVarPath = "/shipment/v1/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (shipmentNotice != null && shipmentNotice.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipmentNotice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipmentNotice; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Capture", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud. Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CaptureAsync (Shipment shipmentNotice)
        {
             await CaptureAsyncWithHttpInfo(shipmentNotice);

        }

        /// <summary>
        /// Captures and stores a shipment notice in !D Cloud. Only shipment notices are allowed. These are represented by the status INTRANSIT.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentNotice">Shipment notice to capture.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CaptureAsyncWithHttpInfo (Shipment shipmentNotice)
        {
            // verify the required parameter 'shipmentNotice' is set
            if (shipmentNotice == null)
                throw new ApiException(400, "Missing required parameter 'shipmentNotice' when calling ShipmentApi->Capture");

            var localVarPath = "/shipment/v1/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (shipmentNotice != null && shipmentNotice.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipmentNotice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipmentNotice; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Capture", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a shipment notice from !D Cloud. If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns></returns>
        public void Delete (string parentId)
        {
             DeleteWithHttpInfo(parentId);
        }

        /// <summary>
        /// Deletes a shipment notice from !D Cloud. If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string parentId)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling ShipmentApi->Delete");

            var localVarPath = "/shipment/v1/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parentId != null) localVarQueryParams.Add("parent_id", Configuration.ApiClient.ParameterToString(parentId)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a shipment notice from !D Cloud. If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string parentId)
        {
             await DeleteAsyncWithHttpInfo(parentId);

        }

        /// <summary>
        /// Deletes a shipment notice from !D Cloud. If the shipment notice was created by an aggregation event, this event will be retracted without a reason.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string parentId)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling ShipmentApi->Delete");

            var localVarPath = "/shipment/v1/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parentId != null) localVarQueryParams.Add("parent_id", Configuration.ApiClient.ParameterToString(parentId)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves a list of shipment summaries. Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>List&lt;ShipmentSummary&gt;</returns>
        public List<ShipmentSummary> List (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null)
        {
             ApiResponse<List<ShipmentSummary>> localVarResponse = ListWithHttpInfo(source, destination, status, lastModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of shipment summaries. Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>ApiResponse of List&lt;ShipmentSummary&gt;</returns>
        public ApiResponse< List<ShipmentSummary> > ListWithHttpInfo (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null)
        {

            var localVarPath = "/shipment/v1/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/csv", 
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (source != null) localVarQueryParams.Add("source", Configuration.ApiClient.ParameterToString(source)); // query parameter
            if (destination != null) localVarQueryParams.Add("destination", Configuration.ApiClient.ParameterToString(destination)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (lastModifiedSince != null) localVarQueryParams.Add("last_modified_since", Configuration.ApiClient.ParameterToString(lastModifiedSince)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ShipmentSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ShipmentSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ShipmentSummary>)));
            
        }

        /// <summary>
        /// Retrieves a list of shipment summaries. Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>Task of List&lt;ShipmentSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<ShipmentSummary>> ListAsync (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null)
        {
             ApiResponse<List<ShipmentSummary>> localVarResponse = await ListAsyncWithHttpInfo(source, destination, status, lastModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of shipment summaries. Either source or destination is required, not both. This endpoint can produce: JSON, CSV and Excel.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source of a shipment. (optional)</param>
        /// <param name="destination">Destination of a shipment. (optional)</param>
        /// <param name="status">Status of the shipment. (optional, default to INTRANSIT)</param>
        /// <param name="lastModifiedSince">Find shipments that have been modified since specified time. When omitted: default is present minus one month. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ShipmentSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ShipmentSummary>>> ListAsyncWithHttpInfo (string source = null, string destination = null, string status = null, DateTime? lastModifiedSince = null)
        {

            var localVarPath = "/shipment/v1/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/csv", 
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (source != null) localVarQueryParams.Add("source", Configuration.ApiClient.ParameterToString(source)); // query parameter
            if (destination != null) localVarQueryParams.Add("destination", Configuration.ApiClient.ParameterToString(destination)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (lastModifiedSince != null) localVarQueryParams.Add("last_modified_since", Configuration.ApiClient.ParameterToString(lastModifiedSince)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ShipmentSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ShipmentSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ShipmentSummary>)));
            
        }

        /// <summary>
        /// Retrieves a shipment from !D Cloud. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>Shipment</returns>
        public Shipment Retrieve (string parentId, bool? includeArticles = null)
        {
             ApiResponse<Shipment> localVarResponse = RetrieveWithHttpInfo(parentId, includeArticles);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a shipment from !D Cloud. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>ApiResponse of Shipment</returns>
        public ApiResponse< Shipment > RetrieveWithHttpInfo (string parentId, bool? includeArticles = null)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling ShipmentApi->Retrieve");

            var localVarPath = "/shipment/v1/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parentId != null) localVarQueryParams.Add("parent_id", Configuration.ApiClient.ParameterToString(parentId)); // query parameter
            if (includeArticles != null) localVarQueryParams.Add("include_articles", Configuration.ApiClient.ParameterToString(includeArticles)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
            
        }

        /// <summary>
        /// Retrieves a shipment from !D Cloud. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> RetrieveAsync (string parentId, bool? includeArticles = null)
        {
             ApiResponse<Shipment> localVarResponse = await RetrieveAsyncWithHttpInfo(parentId, includeArticles);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a shipment from !D Cloud. 
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Parent ID of a shipment.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Shipment>> RetrieveAsyncWithHttpInfo (string parentId, bool? includeArticles = null)
        {
            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new ApiException(400, "Missing required parameter 'parentId' when calling ShipmentApi->Retrieve");

            var localVarPath = "/shipment/v1/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parentId != null) localVarQueryParams.Add("parent_id", Configuration.ApiClient.ParameterToString(parentId)); // query parameter
            if (includeArticles != null) localVarQueryParams.Add("include_articles", Configuration.ApiClient.ParameterToString(includeArticles)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Shipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Shipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Shipment)));
            
        }

    }
}
