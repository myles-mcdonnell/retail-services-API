/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nedap.Retail.Api.Idcloud.Client;
using Nedap.Retail.Api.Idcloud.Model;

namespace Nedap.Retail.Api.Idcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Captures and stores workflow events in !D Cloud.
        /// </summary>
        /// <remarks>
        /// The capture endpoint captures one workflow events at a time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns></returns>
        void Capture (WorkflowEvent workflowEvent);

        /// <summary>
        /// Captures and stores workflow events in !D Cloud.
        /// </summary>
        /// <remarks>
        /// The capture endpoint captures one workflow events at a time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CaptureWithHttpInfo (WorkflowEvent workflowEvent);
        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud.
        /// </summary>
        /// <remarks>
        /// Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>List&lt;WorkflowEvent&gt;</returns>
        List<WorkflowEvent> Query (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null);

        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud.
        /// </summary>
        /// <remarks>
        /// Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkflowEvent&gt;</returns>
        ApiResponse<List<WorkflowEvent>> QueryWithHttpInfo (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Captures and stores workflow events in !D Cloud.
        /// </summary>
        /// <remarks>
        /// The capture endpoint captures one workflow events at a time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CaptureAsync (WorkflowEvent workflowEvent);

        /// <summary>
        /// Captures and stores workflow events in !D Cloud.
        /// </summary>
        /// <remarks>
        /// The capture endpoint captures one workflow events at a time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CaptureAsyncWithHttpInfo (WorkflowEvent workflowEvent);
        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud.
        /// </summary>
        /// <remarks>
        /// Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>Task of List&lt;WorkflowEvent&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowEvent>> QueryAsync (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null);

        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud.
        /// </summary>
        /// <remarks>
        /// Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowEvent>>> QueryAsyncWithHttpInfo (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowApi : IWorkflowApi
    {
        private Nedap.Retail.Api.Idcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nedap.Retail.Api.Idcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Captures and stores workflow events in !D Cloud. The capture endpoint captures one workflow events at a time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns></returns>
        public void Capture (WorkflowEvent workflowEvent)
        {
             CaptureWithHttpInfo(workflowEvent);
        }

        /// <summary>
        /// Captures and stores workflow events in !D Cloud. The capture endpoint captures one workflow events at a time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CaptureWithHttpInfo (WorkflowEvent workflowEvent)
        {
            // verify the required parameter 'workflowEvent' is set
            if (workflowEvent == null)
                throw new ApiException(400, "Missing required parameter 'workflowEvent' when calling WorkflowApi->Capture");

            var localVarPath = "/workflow/v2/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (workflowEvent != null && workflowEvent.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workflowEvent); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowEvent; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Capture", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Captures and stores workflow events in !D Cloud. The capture endpoint captures one workflow events at a time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CaptureAsync (WorkflowEvent workflowEvent)
        {
             await CaptureAsyncWithHttpInfo(workflowEvent);

        }

        /// <summary>
        /// Captures and stores workflow events in !D Cloud. The capture endpoint captures one workflow events at a time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowEvent">A workflow event to capture and store.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CaptureAsyncWithHttpInfo (WorkflowEvent workflowEvent)
        {
            // verify the required parameter 'workflowEvent' is set
            if (workflowEvent == null)
                throw new ApiException(400, "Missing required parameter 'workflowEvent' when calling WorkflowApi->Capture");

            var localVarPath = "/workflow/v2/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (workflowEvent != null && workflowEvent.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workflowEvent); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowEvent; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Capture", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud. Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>List&lt;WorkflowEvent&gt;</returns>
        public List<WorkflowEvent> Query (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {
             ApiResponse<List<WorkflowEvent>> localVarResponse = QueryWithHttpInfo(location, type, fromEventTime, untilEventTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud. Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkflowEvent&gt;</returns>
        public ApiResponse< List<WorkflowEvent> > QueryWithHttpInfo (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {

            var localVarPath = "/workflow/v2/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (fromEventTime != null) localVarQueryParams.Add("from_event_time", Configuration.ApiClient.ParameterToString(fromEventTime)); // query parameter
            if (untilEventTime != null) localVarQueryParams.Add("until_event_time", Configuration.ApiClient.ParameterToString(untilEventTime)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Query", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowEvent>)));
            
        }

        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud. Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>Task of List&lt;WorkflowEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowEvent>> QueryAsync (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {
             ApiResponse<List<WorkflowEvent>> localVarResponse = await QueryAsyncWithHttpInfo(location, type, fromEventTime, untilEventTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query and retrieve workflow event(s) from !D Cloud. Returns a set of workflow events that matches the criteria specified in the query parameters.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Identifies location. When omitted: return all workflow events for all locations. (optional)</param>
        /// <param name="type">Defines the type of the workflow event. When omitted: return all workflow events for all types. (optional)</param>
        /// <param name="fromEventTime">Defines date+time since when the counts are required. When omitted: returns all workflow events for specified location since the epoch. (optional)</param>
        /// <param name="untilEventTime">Defines date+time until when the counts are required.  When omitted: returns all workflow events for specified location up until now. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkflowEvent>>> QueryAsyncWithHttpInfo (string location = null, string type = null, DateTime? fromEventTime = null, DateTime? untilEventTime = null)
        {

            var localVarPath = "/workflow/v2/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (fromEventTime != null) localVarQueryParams.Add("from_event_time", Configuration.ApiClient.ParameterToString(fromEventTime)); // query parameter
            if (untilEventTime != null) localVarQueryParams.Add("until_event_time", Configuration.ApiClient.ParameterToString(untilEventTime)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Query", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowEvent>)));
            
        }

    }
}
