/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nedap.Retail.Api.Idcloud.Client;
using Nedap.Retail.Api.Idcloud.Model;

namespace Nedap.Retail.Api.Idcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprovedDifferenceListApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export an approved difference list
        /// </summary>
        /// <remarks>
        /// This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApprovedDifferenceListExportResponse</returns>
        ApprovedDifferenceListExportResponse Export (Guid? id, bool? includeArticles = null, string accept = null);

        /// <summary>
        /// Export an approved difference list
        /// </summary>
        /// <remarks>
        /// This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApiResponse of ApprovedDifferenceListExportResponse</returns>
        ApiResponse<ApprovedDifferenceListExportResponse> ExportWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null);
        /// <summary>
        /// List of approved difference list summaries
        /// </summary>
        /// <remarks>
        /// Retrieves list of approved difference lists for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>List&lt;ApprovedDifferenceListSummary&gt;</returns>
        List<ApprovedDifferenceListSummary> List (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null);

        /// <summary>
        /// List of approved difference list summaries
        /// </summary>
        /// <remarks>
        /// Retrieves list of approved difference lists for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>ApiResponse of List&lt;ApprovedDifferenceListSummary&gt;</returns>
        ApiResponse<List<ApprovedDifferenceListSummary>> ListWithHttpInfo (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null);
        /// <summary>
        /// Retrieve an approved difference list
        /// </summary>
        /// <remarks>
        /// Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApprovedDifferenceListResponse</returns>
        ApprovedDifferenceListResponse Retrieve (Guid? id, bool? includeArticles = null, string accept = null);

        /// <summary>
        /// Retrieve an approved difference list
        /// </summary>
        /// <remarks>
        /// Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApiResponse of ApprovedDifferenceListResponse</returns>
        ApiResponse<ApprovedDifferenceListResponse> RetrieveWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null);
        /// <summary>
        /// Retrieve the summary an approved difference list
        /// </summary>
        /// <remarks>
        /// Returns the summary of an approved difference list for a certain location and RFID time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>ApprovedDifferenceListSummary</returns>
        ApprovedDifferenceListSummary RetrieveSummary (string location, DateTime? rfidTime);

        /// <summary>
        /// Retrieve the summary an approved difference list
        /// </summary>
        /// <remarks>
        /// Returns the summary of an approved difference list for a certain location and RFID time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>ApiResponse of ApprovedDifferenceListSummary</returns>
        ApiResponse<ApprovedDifferenceListSummary> RetrieveSummaryWithHttpInfo (string location, DateTime? rfidTime);
        /// <summary>
        /// Update the export status of an approved difference list
        /// </summary>
        /// <remarks>
        /// !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns></returns>
        void UpdateExportStatus (Guid? id, string exportStatus);

        /// <summary>
        /// Update the export status of an approved difference list
        /// </summary>
        /// <remarks>
        /// !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateExportStatusWithHttpInfo (Guid? id, string exportStatus);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Export an approved difference list
        /// </summary>
        /// <remarks>
        /// This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApprovedDifferenceListExportResponse</returns>
        System.Threading.Tasks.Task<ApprovedDifferenceListExportResponse> ExportAsync (Guid? id, bool? includeArticles = null, string accept = null);

        /// <summary>
        /// Export an approved difference list
        /// </summary>
        /// <remarks>
        /// This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApiResponse (ApprovedDifferenceListExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovedDifferenceListExportResponse>> ExportAsyncWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null);
        /// <summary>
        /// List of approved difference list summaries
        /// </summary>
        /// <remarks>
        /// Retrieves list of approved difference lists for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>Task of List&lt;ApprovedDifferenceListSummary&gt;</returns>
        System.Threading.Tasks.Task<List<ApprovedDifferenceListSummary>> ListAsync (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null);

        /// <summary>
        /// List of approved difference list summaries
        /// </summary>
        /// <remarks>
        /// Retrieves list of approved difference lists for given location.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ApprovedDifferenceListSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApprovedDifferenceListSummary>>> ListAsyncWithHttpInfo (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null);
        /// <summary>
        /// Retrieve an approved difference list
        /// </summary>
        /// <remarks>
        /// Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApprovedDifferenceListResponse</returns>
        System.Threading.Tasks.Task<ApprovedDifferenceListResponse> RetrieveAsync (Guid? id, bool? includeArticles = null, string accept = null);

        /// <summary>
        /// Retrieve an approved difference list
        /// </summary>
        /// <remarks>
        /// Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApiResponse (ApprovedDifferenceListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovedDifferenceListResponse>> RetrieveAsyncWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null);
        /// <summary>
        /// Retrieve the summary an approved difference list
        /// </summary>
        /// <remarks>
        /// Returns the summary of an approved difference list for a certain location and RFID time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>Task of ApprovedDifferenceListSummary</returns>
        System.Threading.Tasks.Task<ApprovedDifferenceListSummary> RetrieveSummaryAsync (string location, DateTime? rfidTime);

        /// <summary>
        /// Retrieve the summary an approved difference list
        /// </summary>
        /// <remarks>
        /// Returns the summary of an approved difference list for a certain location and RFID time.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>Task of ApiResponse (ApprovedDifferenceListSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovedDifferenceListSummary>> RetrieveSummaryAsyncWithHttpInfo (string location, DateTime? rfidTime);
        /// <summary>
        /// Update the export status of an approved difference list
        /// </summary>
        /// <remarks>
        /// !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateExportStatusAsync (Guid? id, string exportStatus);

        /// <summary>
        /// Update the export status of an approved difference list
        /// </summary>
        /// <remarks>
        /// !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </remarks>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateExportStatusAsyncWithHttpInfo (Guid? id, string exportStatus);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApprovedDifferenceListApi : IApprovedDifferenceListApi
    {
        private Nedap.Retail.Api.Idcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovedDifferenceListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApprovedDifferenceListApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovedDifferenceListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApprovedDifferenceListApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nedap.Retail.Api.Idcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nedap.Retail.Api.Idcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Export an approved difference list This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApprovedDifferenceListExportResponse</returns>
        public ApprovedDifferenceListExportResponse Export (Guid? id, bool? includeArticles = null, string accept = null)
        {
             ApiResponse<ApprovedDifferenceListExportResponse> localVarResponse = ExportWithHttpInfo(id, includeArticles, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export an approved difference list This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApiResponse of ApprovedDifferenceListExportResponse</returns>
        public ApiResponse< ApprovedDifferenceListExportResponse > ExportWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApprovedDifferenceListApi->Export");

            var localVarPath = "/approved_difference_list/v1/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/csv", 
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (includeArticles != null) localVarQueryParams.Add("include_articles", Configuration.ApiClient.ParameterToString(includeArticles)); // query parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApprovedDifferenceListExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApprovedDifferenceListExportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApprovedDifferenceListExportResponse)));
            
        }

        /// <summary>
        /// Export an approved difference list This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApprovedDifferenceListExportResponse</returns>
        public async System.Threading.Tasks.Task<ApprovedDifferenceListExportResponse> ExportAsync (Guid? id, bool? includeArticles = null, string accept = null)
        {
             ApiResponse<ApprovedDifferenceListExportResponse> localVarResponse = await ExportAsyncWithHttpInfo(id, includeArticles, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export an approved difference list This endpoint returns the approved difference list with only one quantity per GTIN: the RFID quantity if the difference for that GTIN has been approved, otherwise the ERP quantity. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApiResponse (ApprovedDifferenceListExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApprovedDifferenceListExportResponse>> ExportAsyncWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApprovedDifferenceListApi->Export");

            var localVarPath = "/approved_difference_list/v1/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/csv", 
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (includeArticles != null) localVarQueryParams.Add("include_articles", Configuration.ApiClient.ParameterToString(includeArticles)); // query parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApprovedDifferenceListExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApprovedDifferenceListExportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApprovedDifferenceListExportResponse)));
            
        }

        /// <summary>
        /// List of approved difference list summaries Retrieves list of approved difference lists for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>List&lt;ApprovedDifferenceListSummary&gt;</returns>
        public List<ApprovedDifferenceListSummary> List (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null)
        {
             ApiResponse<List<ApprovedDifferenceListSummary>> localVarResponse = ListWithHttpInfo(location, fromRfidTime, untilRfidTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of approved difference list summaries Retrieves list of approved difference lists for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>ApiResponse of List&lt;ApprovedDifferenceListSummary&gt;</returns>
        public ApiResponse< List<ApprovedDifferenceListSummary> > ListWithHttpInfo (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling ApprovedDifferenceListApi->List");

            var localVarPath = "/approved_difference_list/v1/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (fromRfidTime != null) localVarQueryParams.Add("from_rfid_time", Configuration.ApiClient.ParameterToString(fromRfidTime)); // query parameter
            if (untilRfidTime != null) localVarQueryParams.Add("until_rfid_time", Configuration.ApiClient.ParameterToString(untilRfidTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApprovedDifferenceListSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApprovedDifferenceListSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApprovedDifferenceListSummary>)));
            
        }

        /// <summary>
        /// List of approved difference list summaries Retrieves list of approved difference lists for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>Task of List&lt;ApprovedDifferenceListSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApprovedDifferenceListSummary>> ListAsync (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null)
        {
             ApiResponse<List<ApprovedDifferenceListSummary>> localVarResponse = await ListAsyncWithHttpInfo(location, fromRfidTime, untilRfidTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of approved difference list summaries Retrieves list of approved difference lists for given location.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="fromRfidTime">Defines date+time since when approved difference lists are required. When omitted: returns all approved difference lists for specified location since the epoch. (optional)</param>
        /// <param name="untilRfidTime">Defines date+time until when approved difference lists are required. When omitted: returns all approved difference lists for specified location up until now. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ApprovedDifferenceListSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApprovedDifferenceListSummary>>> ListAsyncWithHttpInfo (string location, DateTime? fromRfidTime = null, DateTime? untilRfidTime = null)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling ApprovedDifferenceListApi->List");

            var localVarPath = "/approved_difference_list/v1/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (fromRfidTime != null) localVarQueryParams.Add("from_rfid_time", Configuration.ApiClient.ParameterToString(fromRfidTime)); // query parameter
            if (untilRfidTime != null) localVarQueryParams.Add("until_rfid_time", Configuration.ApiClient.ParameterToString(untilRfidTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApprovedDifferenceListSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApprovedDifferenceListSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApprovedDifferenceListSummary>)));
            
        }

        /// <summary>
        /// Retrieve an approved difference list Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApprovedDifferenceListResponse</returns>
        public ApprovedDifferenceListResponse Retrieve (Guid? id, bool? includeArticles = null, string accept = null)
        {
             ApiResponse<ApprovedDifferenceListResponse> localVarResponse = RetrieveWithHttpInfo(id, includeArticles, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an approved difference list Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>ApiResponse of ApprovedDifferenceListResponse</returns>
        public ApiResponse< ApprovedDifferenceListResponse > RetrieveWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApprovedDifferenceListApi->Retrieve");

            var localVarPath = "/approved_difference_list/v1/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/csv", 
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (includeArticles != null) localVarQueryParams.Add("include_articles", Configuration.ApiClient.ParameterToString(includeArticles)); // query parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApprovedDifferenceListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApprovedDifferenceListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApprovedDifferenceListResponse)));
            
        }

        /// <summary>
        /// Retrieve an approved difference list Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApprovedDifferenceListResponse</returns>
        public async System.Threading.Tasks.Task<ApprovedDifferenceListResponse> RetrieveAsync (Guid? id, bool? includeArticles = null, string accept = null)
        {
             ApiResponse<ApprovedDifferenceListResponse> localVarResponse = await RetrieveAsyncWithHttpInfo(id, includeArticles, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an approved difference list Retrieve an approved difference list using the difference list ID. The response contains GTIN, ERP quantity, RFID quantity and an approved flag. This endpoint returns all GTINs, even the ones where RFID and ERP quantities are equal.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Approved difference list ID.</param>
        /// <param name="includeArticles">When set to true the article master data will be included in the response. (optional, default to false)</param>
        /// <param name="accept">Approved difference list ID. (optional)</param>
        /// <returns>Task of ApiResponse (ApprovedDifferenceListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApprovedDifferenceListResponse>> RetrieveAsyncWithHttpInfo (Guid? id, bool? includeArticles = null, string accept = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApprovedDifferenceListApi->Retrieve");

            var localVarPath = "/approved_difference_list/v1/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/csv", 
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (includeArticles != null) localVarQueryParams.Add("include_articles", Configuration.ApiClient.ParameterToString(includeArticles)); // query parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApprovedDifferenceListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApprovedDifferenceListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApprovedDifferenceListResponse)));
            
        }

        /// <summary>
        /// Retrieve the summary an approved difference list Returns the summary of an approved difference list for a certain location and RFID time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>ApprovedDifferenceListSummary</returns>
        public ApprovedDifferenceListSummary RetrieveSummary (string location, DateTime? rfidTime)
        {
             ApiResponse<ApprovedDifferenceListSummary> localVarResponse = RetrieveSummaryWithHttpInfo(location, rfidTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the summary an approved difference list Returns the summary of an approved difference list for a certain location and RFID time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>ApiResponse of ApprovedDifferenceListSummary</returns>
        public ApiResponse< ApprovedDifferenceListSummary > RetrieveSummaryWithHttpInfo (string location, DateTime? rfidTime)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling ApprovedDifferenceListApi->RetrieveSummary");
            // verify the required parameter 'rfidTime' is set
            if (rfidTime == null)
                throw new ApiException(400, "Missing required parameter 'rfidTime' when calling ApprovedDifferenceListApi->RetrieveSummary");

            var localVarPath = "/approved_difference_list/v1/retrieve_summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (rfidTime != null) localVarQueryParams.Add("rfid_time", Configuration.ApiClient.ParameterToString(rfidTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApprovedDifferenceListSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApprovedDifferenceListSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApprovedDifferenceListSummary)));
            
        }

        /// <summary>
        /// Retrieve the summary an approved difference list Returns the summary of an approved difference list for a certain location and RFID time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>Task of ApprovedDifferenceListSummary</returns>
        public async System.Threading.Tasks.Task<ApprovedDifferenceListSummary> RetrieveSummaryAsync (string location, DateTime? rfidTime)
        {
             ApiResponse<ApprovedDifferenceListSummary> localVarResponse = await RetrieveSummaryAsyncWithHttpInfo(location, rfidTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the summary an approved difference list Returns the summary of an approved difference list for a certain location and RFID time.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The location identifier for list of approved difference lists.</param>
        /// <param name="rfidTime">Date and time of an RFID stock.</param>
        /// <returns>Task of ApiResponse (ApprovedDifferenceListSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApprovedDifferenceListSummary>> RetrieveSummaryAsyncWithHttpInfo (string location, DateTime? rfidTime)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling ApprovedDifferenceListApi->RetrieveSummary");
            // verify the required parameter 'rfidTime' is set
            if (rfidTime == null)
                throw new ApiException(400, "Missing required parameter 'rfidTime' when calling ApprovedDifferenceListApi->RetrieveSummary");

            var localVarPath = "/approved_difference_list/v1/retrieve_summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (rfidTime != null) localVarQueryParams.Add("rfid_time", Configuration.ApiClient.ParameterToString(rfidTime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApprovedDifferenceListSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApprovedDifferenceListSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApprovedDifferenceListSummary)));
            
        }

        /// <summary>
        /// Update the export status of an approved difference list !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns></returns>
        public void UpdateExportStatus (Guid? id, string exportStatus)
        {
             UpdateExportStatusWithHttpInfo(id, exportStatus);
        }

        /// <summary>
        /// Update the export status of an approved difference list !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateExportStatusWithHttpInfo (Guid? id, string exportStatus)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApprovedDifferenceListApi->UpdateExportStatus");
            // verify the required parameter 'exportStatus' is set
            if (exportStatus == null)
                throw new ApiException(400, "Missing required parameter 'exportStatus' when calling ApprovedDifferenceListApi->UpdateExportStatus");

            var localVarPath = "/approved_difference_list/v1/update_export_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (exportStatus != null) localVarQueryParams.Add("export_status", Configuration.ApiClient.ParameterToString(exportStatus)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExportStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the export status of an approved difference list !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateExportStatusAsync (Guid? id, string exportStatus)
        {
             await UpdateExportStatusAsyncWithHttpInfo(id, exportStatus);

        }

        /// <summary>
        /// Update the export status of an approved difference list !D Cloud keeps track of the export status of approved difference lists. This endpoint can be used to update the status in !D Cloud.
        /// </summary>
        /// <exception cref="Nedap.Retail.Api.Idcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of approved difference list.</param>
        /// <param name="exportStatus">New export status of approved difference list.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateExportStatusAsyncWithHttpInfo (Guid? id, string exportStatus)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ApprovedDifferenceListApi->UpdateExportStatus");
            // verify the required parameter 'exportStatus' is set
            if (exportStatus == null)
                throw new ApiException(400, "Missing required parameter 'exportStatus' when calling ApprovedDifferenceListApi->UpdateExportStatus");

            var localVarPath = "/approved_difference_list/v1/update_export_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (exportStatus != null) localVarQueryParams.Add("export_status", Configuration.ApiClient.ParameterToString(exportStatus)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExportStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
