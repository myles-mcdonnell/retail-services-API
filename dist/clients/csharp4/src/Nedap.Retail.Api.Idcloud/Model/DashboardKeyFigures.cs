/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// Dashboard summary for one store
    /// </summary>
    [DataContract]
    public partial class DashboardKeyFigures :  IEquatable<DashboardKeyFigures>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DifferenceListStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DifferenceListStatusEnum
        {
            
            /// <summary>
            /// Enum APPROVED for "APPROVED"
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED,
            
            /// <summary>
            /// Enum CANBEAPPROVED for "CAN_BE_APPROVED"
            /// </summary>
            [EnumMember(Value = "CAN_BE_APPROVED")]
            CANBEAPPROVED,
            
            /// <summary>
            /// Enum PERFORMNEWRFIDCOUNT for "PERFORM_NEW_RFID_COUNT"
            /// </summary>
            [EnumMember(Value = "PERFORM_NEW_RFID_COUNT")]
            PERFORMNEWRFIDCOUNT,
            
            /// <summary>
            /// Enum IMPORTERPBEFOREAPPROVING for "IMPORT_ERP_BEFORE_APPROVING"
            /// </summary>
            [EnumMember(Value = "IMPORT_ERP_BEFORE_APPROVING")]
            IMPORTERPBEFOREAPPROVING,
            
            /// <summary>
            /// Enum PAYMENTREQUIRED for "PAYMENT_REQUIRED"
            /// </summary>
            [EnumMember(Value = "PAYMENT_REQUIRED")]
            PAYMENTREQUIRED
        }

        /// <summary>
        /// Gets or Sets DifferenceListStatus
        /// </summary>
        [DataMember(Name="difference_list_status", EmitDefaultValue=false)]
        public DifferenceListStatusEnum? DifferenceListStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardKeyFigures" /> class.
        /// </summary>
        /// <param name="DifferenceListAccuracy">DifferenceListAccuracy.</param>
        /// <param name="OrganizationId">OrganizationId.</param>
        /// <param name="LocationId">LocationId.</param>
        /// <param name="AbsoluteDifference">Absolute difference of this difference list in number of items..</param>
        /// <param name="GrossDifference">Gross difference of this difference list as a percentage..</param>
        /// <param name="NotOnShelfGtinQuantity">The number of articles (GTINs) that are not available on shelf, but are available in a stock room..</param>
        /// <param name="NotOnShelfPercentage">Same as above, but as a percentage of the total number of GTINs in the store..</param>
        /// <param name="StoreQuantity">The number of items in the entire store..</param>
        /// <param name="StockRatio">Percentage of items in the entire store that are in stock rooms..</param>
        /// <param name="ErpStockId">ID of ERP stock used to generate the summary..</param>
        /// <param name="ErpStockTime">Time of ERP stock used to generate the summary..</param>
        /// <param name="RfidStockTime">Time of RFID stock used to generate the summary..</param>
        /// <param name="ErpQuantity">Number of items in ERP stock.</param>
        /// <param name="RfidQuantity">Number of items in RFID stock.</param>
        /// <param name="ErpGtinQuantity">Number of GTINs in ERP stock.</param>
        /// <param name="RfidGtinQuantity">Number of GTINs in RFID stock. The number of articles (GTINs) that are available in the store (including sales floors and stock rooms)..</param>
        /// <param name="PlusDifference">Positive difference of this difference list in number of items (where there is more items in rfid count than in erp import)..</param>
        /// <param name="MinusDifference">Negative difference of this difference list in number of items (where there is more items in erp import than in rfid count)..</param>
        /// <param name="StockRoomsQuantity">The number of items in all stock rooms..</param>
        /// <param name="SalesFloorsQuantity">The number of items in all sales floors..</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="DifferenceListApprovedOn">DifferenceListApprovedOn.</param>
        /// <param name="DifferenceListStatus">DifferenceListStatus.</param>
        /// <param name="ShipmentsInTransit">The number of shipments that are in transit.</param>
        /// <param name="ShipmentsAverageReceivedPercentage">The average received percentage over the shipments in the last 10 weeks.</param>
        public DashboardKeyFigures(double? DifferenceListAccuracy = default(double?), long? OrganizationId = default(long?), string LocationId = default(string), int? AbsoluteDifference = default(int?), double? GrossDifference = default(double?), int? NotOnShelfGtinQuantity = default(int?), double? NotOnShelfPercentage = default(double?), int? StoreQuantity = default(int?), double? StockRatio = default(double?), string ErpStockId = default(string), DateTime? ErpStockTime = default(DateTime?), DateTime? RfidStockTime = default(DateTime?), int? ErpQuantity = default(int?), int? RfidQuantity = default(int?), int? ErpGtinQuantity = default(int?), int? RfidGtinQuantity = default(int?), int? PlusDifference = default(int?), int? MinusDifference = default(int?), int? StockRoomsQuantity = default(int?), int? SalesFloorsQuantity = default(int?), DateTime? CreationDate = default(DateTime?), DateTime? DifferenceListApprovedOn = default(DateTime?), DifferenceListStatusEnum? DifferenceListStatus = default(DifferenceListStatusEnum?), int? ShipmentsInTransit = default(int?), float? ShipmentsAverageReceivedPercentage = default(float?))
        {
            this.DifferenceListAccuracy = DifferenceListAccuracy;
            this.OrganizationId = OrganizationId;
            this.LocationId = LocationId;
            this.AbsoluteDifference = AbsoluteDifference;
            this.GrossDifference = GrossDifference;
            this.NotOnShelfGtinQuantity = NotOnShelfGtinQuantity;
            this.NotOnShelfPercentage = NotOnShelfPercentage;
            this.StoreQuantity = StoreQuantity;
            this.StockRatio = StockRatio;
            this.ErpStockId = ErpStockId;
            this.ErpStockTime = ErpStockTime;
            this.RfidStockTime = RfidStockTime;
            this.ErpQuantity = ErpQuantity;
            this.RfidQuantity = RfidQuantity;
            this.ErpGtinQuantity = ErpGtinQuantity;
            this.RfidGtinQuantity = RfidGtinQuantity;
            this.PlusDifference = PlusDifference;
            this.MinusDifference = MinusDifference;
            this.StockRoomsQuantity = StockRoomsQuantity;
            this.SalesFloorsQuantity = SalesFloorsQuantity;
            this.CreationDate = CreationDate;
            this.DifferenceListApprovedOn = DifferenceListApprovedOn;
            this.DifferenceListStatus = DifferenceListStatus;
            this.ShipmentsInTransit = ShipmentsInTransit;
            this.ShipmentsAverageReceivedPercentage = ShipmentsAverageReceivedPercentage;
        }
        
        /// <summary>
        /// Gets or Sets DifferenceListAccuracy
        /// </summary>
        [DataMember(Name="differenceListAccuracy", EmitDefaultValue=false)]
        public double? DifferenceListAccuracy { get; set; }
        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public long? OrganizationId { get; set; }
        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }
        /// <summary>
        /// Absolute difference of this difference list in number of items.
        /// </summary>
        /// <value>Absolute difference of this difference list in number of items.</value>
        [DataMember(Name="absolute_difference", EmitDefaultValue=false)]
        public int? AbsoluteDifference { get; set; }
        /// <summary>
        /// Gross difference of this difference list as a percentage.
        /// </summary>
        /// <value>Gross difference of this difference list as a percentage.</value>
        [DataMember(Name="gross_difference", EmitDefaultValue=false)]
        public double? GrossDifference { get; set; }
        /// <summary>
        /// The number of articles (GTINs) that are not available on shelf, but are available in a stock room.
        /// </summary>
        /// <value>The number of articles (GTINs) that are not available on shelf, but are available in a stock room.</value>
        [DataMember(Name="not_on_shelf_gtin_quantity", EmitDefaultValue=false)]
        public int? NotOnShelfGtinQuantity { get; set; }
        /// <summary>
        /// Same as above, but as a percentage of the total number of GTINs in the store.
        /// </summary>
        /// <value>Same as above, but as a percentage of the total number of GTINs in the store.</value>
        [DataMember(Name="not_on_shelf_percentage", EmitDefaultValue=false)]
        public double? NotOnShelfPercentage { get; set; }
        /// <summary>
        /// The number of items in the entire store.
        /// </summary>
        /// <value>The number of items in the entire store.</value>
        [DataMember(Name="store_quantity", EmitDefaultValue=false)]
        public int? StoreQuantity { get; set; }
        /// <summary>
        /// Percentage of items in the entire store that are in stock rooms.
        /// </summary>
        /// <value>Percentage of items in the entire store that are in stock rooms.</value>
        [DataMember(Name="stock_ratio", EmitDefaultValue=false)]
        public double? StockRatio { get; set; }
        /// <summary>
        /// ID of ERP stock used to generate the summary.
        /// </summary>
        /// <value>ID of ERP stock used to generate the summary.</value>
        [DataMember(Name="erp_stock_id", EmitDefaultValue=false)]
        public string ErpStockId { get; set; }
        /// <summary>
        /// Time of ERP stock used to generate the summary.
        /// </summary>
        /// <value>Time of ERP stock used to generate the summary.</value>
        [DataMember(Name="erp_stock_time", EmitDefaultValue=false)]
        public DateTime? ErpStockTime { get; set; }
        /// <summary>
        /// Time of RFID stock used to generate the summary.
        /// </summary>
        /// <value>Time of RFID stock used to generate the summary.</value>
        [DataMember(Name="rfid_stock_time", EmitDefaultValue=false)]
        public DateTime? RfidStockTime { get; set; }
        /// <summary>
        /// Number of items in ERP stock
        /// </summary>
        /// <value>Number of items in ERP stock</value>
        [DataMember(Name="erp_quantity", EmitDefaultValue=false)]
        public int? ErpQuantity { get; set; }
        /// <summary>
        /// Number of items in RFID stock
        /// </summary>
        /// <value>Number of items in RFID stock</value>
        [DataMember(Name="rfid_quantity", EmitDefaultValue=false)]
        public int? RfidQuantity { get; set; }
        /// <summary>
        /// Number of GTINs in ERP stock
        /// </summary>
        /// <value>Number of GTINs in ERP stock</value>
        [DataMember(Name="erp_gtin_quantity", EmitDefaultValue=false)]
        public int? ErpGtinQuantity { get; set; }
        /// <summary>
        /// Number of GTINs in RFID stock. The number of articles (GTINs) that are available in the store (including sales floors and stock rooms).
        /// </summary>
        /// <value>Number of GTINs in RFID stock. The number of articles (GTINs) that are available in the store (including sales floors and stock rooms).</value>
        [DataMember(Name="rfid_gtin_quantity", EmitDefaultValue=false)]
        public int? RfidGtinQuantity { get; set; }
        /// <summary>
        /// Positive difference of this difference list in number of items (where there is more items in rfid count than in erp import).
        /// </summary>
        /// <value>Positive difference of this difference list in number of items (where there is more items in rfid count than in erp import).</value>
        [DataMember(Name="plus_difference", EmitDefaultValue=false)]
        public int? PlusDifference { get; set; }
        /// <summary>
        /// Negative difference of this difference list in number of items (where there is more items in erp import than in rfid count).
        /// </summary>
        /// <value>Negative difference of this difference list in number of items (where there is more items in erp import than in rfid count).</value>
        [DataMember(Name="minus_difference", EmitDefaultValue=false)]
        public int? MinusDifference { get; set; }
        /// <summary>
        /// The number of items in all stock rooms.
        /// </summary>
        /// <value>The number of items in all stock rooms.</value>
        [DataMember(Name="stock_rooms_quantity", EmitDefaultValue=false)]
        public int? StockRoomsQuantity { get; set; }
        /// <summary>
        /// The number of items in all sales floors.
        /// </summary>
        /// <value>The number of items in all sales floors.</value>
        [DataMember(Name="sales_floors_quantity", EmitDefaultValue=false)]
        public int? SalesFloorsQuantity { get; set; }
        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Gets or Sets DifferenceListApprovedOn
        /// </summary>
        [DataMember(Name="difference_list_approved_on", EmitDefaultValue=false)]
        public DateTime? DifferenceListApprovedOn { get; set; }
        /// <summary>
        /// The number of shipments that are in transit
        /// </summary>
        /// <value>The number of shipments that are in transit</value>
        [DataMember(Name="shipments_in_transit", EmitDefaultValue=false)]
        public int? ShipmentsInTransit { get; set; }
        /// <summary>
        /// The average received percentage over the shipments in the last 10 weeks
        /// </summary>
        /// <value>The average received percentage over the shipments in the last 10 weeks</value>
        [DataMember(Name="shipments_average_received_percentage", EmitDefaultValue=false)]
        public float? ShipmentsAverageReceivedPercentage { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardKeyFigures {\n");
            sb.Append("  DifferenceListAccuracy: ").Append(DifferenceListAccuracy).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  AbsoluteDifference: ").Append(AbsoluteDifference).Append("\n");
            sb.Append("  GrossDifference: ").Append(GrossDifference).Append("\n");
            sb.Append("  NotOnShelfGtinQuantity: ").Append(NotOnShelfGtinQuantity).Append("\n");
            sb.Append("  NotOnShelfPercentage: ").Append(NotOnShelfPercentage).Append("\n");
            sb.Append("  StoreQuantity: ").Append(StoreQuantity).Append("\n");
            sb.Append("  StockRatio: ").Append(StockRatio).Append("\n");
            sb.Append("  ErpStockId: ").Append(ErpStockId).Append("\n");
            sb.Append("  ErpStockTime: ").Append(ErpStockTime).Append("\n");
            sb.Append("  RfidStockTime: ").Append(RfidStockTime).Append("\n");
            sb.Append("  ErpQuantity: ").Append(ErpQuantity).Append("\n");
            sb.Append("  RfidQuantity: ").Append(RfidQuantity).Append("\n");
            sb.Append("  ErpGtinQuantity: ").Append(ErpGtinQuantity).Append("\n");
            sb.Append("  RfidGtinQuantity: ").Append(RfidGtinQuantity).Append("\n");
            sb.Append("  PlusDifference: ").Append(PlusDifference).Append("\n");
            sb.Append("  MinusDifference: ").Append(MinusDifference).Append("\n");
            sb.Append("  StockRoomsQuantity: ").Append(StockRoomsQuantity).Append("\n");
            sb.Append("  SalesFloorsQuantity: ").Append(SalesFloorsQuantity).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  DifferenceListApprovedOn: ").Append(DifferenceListApprovedOn).Append("\n");
            sb.Append("  DifferenceListStatus: ").Append(DifferenceListStatus).Append("\n");
            sb.Append("  ShipmentsInTransit: ").Append(ShipmentsInTransit).Append("\n");
            sb.Append("  ShipmentsAverageReceivedPercentage: ").Append(ShipmentsAverageReceivedPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DashboardKeyFigures);
        }

        /// <summary>
        /// Returns true if DashboardKeyFigures instances are equal
        /// </summary>
        /// <param name="other">Instance of DashboardKeyFigures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardKeyFigures other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DifferenceListAccuracy == other.DifferenceListAccuracy ||
                    this.DifferenceListAccuracy != null &&
                    this.DifferenceListAccuracy.Equals(other.DifferenceListAccuracy)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.AbsoluteDifference == other.AbsoluteDifference ||
                    this.AbsoluteDifference != null &&
                    this.AbsoluteDifference.Equals(other.AbsoluteDifference)
                ) && 
                (
                    this.GrossDifference == other.GrossDifference ||
                    this.GrossDifference != null &&
                    this.GrossDifference.Equals(other.GrossDifference)
                ) && 
                (
                    this.NotOnShelfGtinQuantity == other.NotOnShelfGtinQuantity ||
                    this.NotOnShelfGtinQuantity != null &&
                    this.NotOnShelfGtinQuantity.Equals(other.NotOnShelfGtinQuantity)
                ) && 
                (
                    this.NotOnShelfPercentage == other.NotOnShelfPercentage ||
                    this.NotOnShelfPercentage != null &&
                    this.NotOnShelfPercentage.Equals(other.NotOnShelfPercentage)
                ) && 
                (
                    this.StoreQuantity == other.StoreQuantity ||
                    this.StoreQuantity != null &&
                    this.StoreQuantity.Equals(other.StoreQuantity)
                ) && 
                (
                    this.StockRatio == other.StockRatio ||
                    this.StockRatio != null &&
                    this.StockRatio.Equals(other.StockRatio)
                ) && 
                (
                    this.ErpStockId == other.ErpStockId ||
                    this.ErpStockId != null &&
                    this.ErpStockId.Equals(other.ErpStockId)
                ) && 
                (
                    this.ErpStockTime == other.ErpStockTime ||
                    this.ErpStockTime != null &&
                    this.ErpStockTime.Equals(other.ErpStockTime)
                ) && 
                (
                    this.RfidStockTime == other.RfidStockTime ||
                    this.RfidStockTime != null &&
                    this.RfidStockTime.Equals(other.RfidStockTime)
                ) && 
                (
                    this.ErpQuantity == other.ErpQuantity ||
                    this.ErpQuantity != null &&
                    this.ErpQuantity.Equals(other.ErpQuantity)
                ) && 
                (
                    this.RfidQuantity == other.RfidQuantity ||
                    this.RfidQuantity != null &&
                    this.RfidQuantity.Equals(other.RfidQuantity)
                ) && 
                (
                    this.ErpGtinQuantity == other.ErpGtinQuantity ||
                    this.ErpGtinQuantity != null &&
                    this.ErpGtinQuantity.Equals(other.ErpGtinQuantity)
                ) && 
                (
                    this.RfidGtinQuantity == other.RfidGtinQuantity ||
                    this.RfidGtinQuantity != null &&
                    this.RfidGtinQuantity.Equals(other.RfidGtinQuantity)
                ) && 
                (
                    this.PlusDifference == other.PlusDifference ||
                    this.PlusDifference != null &&
                    this.PlusDifference.Equals(other.PlusDifference)
                ) && 
                (
                    this.MinusDifference == other.MinusDifference ||
                    this.MinusDifference != null &&
                    this.MinusDifference.Equals(other.MinusDifference)
                ) && 
                (
                    this.StockRoomsQuantity == other.StockRoomsQuantity ||
                    this.StockRoomsQuantity != null &&
                    this.StockRoomsQuantity.Equals(other.StockRoomsQuantity)
                ) && 
                (
                    this.SalesFloorsQuantity == other.SalesFloorsQuantity ||
                    this.SalesFloorsQuantity != null &&
                    this.SalesFloorsQuantity.Equals(other.SalesFloorsQuantity)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.DifferenceListApprovedOn == other.DifferenceListApprovedOn ||
                    this.DifferenceListApprovedOn != null &&
                    this.DifferenceListApprovedOn.Equals(other.DifferenceListApprovedOn)
                ) && 
                (
                    this.DifferenceListStatus == other.DifferenceListStatus ||
                    this.DifferenceListStatus != null &&
                    this.DifferenceListStatus.Equals(other.DifferenceListStatus)
                ) && 
                (
                    this.ShipmentsInTransit == other.ShipmentsInTransit ||
                    this.ShipmentsInTransit != null &&
                    this.ShipmentsInTransit.Equals(other.ShipmentsInTransit)
                ) && 
                (
                    this.ShipmentsAverageReceivedPercentage == other.ShipmentsAverageReceivedPercentage ||
                    this.ShipmentsAverageReceivedPercentage != null &&
                    this.ShipmentsAverageReceivedPercentage.Equals(other.ShipmentsAverageReceivedPercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DifferenceListAccuracy != null)
                    hash = hash * 59 + this.DifferenceListAccuracy.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.AbsoluteDifference != null)
                    hash = hash * 59 + this.AbsoluteDifference.GetHashCode();
                if (this.GrossDifference != null)
                    hash = hash * 59 + this.GrossDifference.GetHashCode();
                if (this.NotOnShelfGtinQuantity != null)
                    hash = hash * 59 + this.NotOnShelfGtinQuantity.GetHashCode();
                if (this.NotOnShelfPercentage != null)
                    hash = hash * 59 + this.NotOnShelfPercentage.GetHashCode();
                if (this.StoreQuantity != null)
                    hash = hash * 59 + this.StoreQuantity.GetHashCode();
                if (this.StockRatio != null)
                    hash = hash * 59 + this.StockRatio.GetHashCode();
                if (this.ErpStockId != null)
                    hash = hash * 59 + this.ErpStockId.GetHashCode();
                if (this.ErpStockTime != null)
                    hash = hash * 59 + this.ErpStockTime.GetHashCode();
                if (this.RfidStockTime != null)
                    hash = hash * 59 + this.RfidStockTime.GetHashCode();
                if (this.ErpQuantity != null)
                    hash = hash * 59 + this.ErpQuantity.GetHashCode();
                if (this.RfidQuantity != null)
                    hash = hash * 59 + this.RfidQuantity.GetHashCode();
                if (this.ErpGtinQuantity != null)
                    hash = hash * 59 + this.ErpGtinQuantity.GetHashCode();
                if (this.RfidGtinQuantity != null)
                    hash = hash * 59 + this.RfidGtinQuantity.GetHashCode();
                if (this.PlusDifference != null)
                    hash = hash * 59 + this.PlusDifference.GetHashCode();
                if (this.MinusDifference != null)
                    hash = hash * 59 + this.MinusDifference.GetHashCode();
                if (this.StockRoomsQuantity != null)
                    hash = hash * 59 + this.StockRoomsQuantity.GetHashCode();
                if (this.SalesFloorsQuantity != null)
                    hash = hash * 59 + this.SalesFloorsQuantity.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.DifferenceListApprovedOn != null)
                    hash = hash * 59 + this.DifferenceListApprovedOn.GetHashCode();
                if (this.DifferenceListStatus != null)
                    hash = hash * 59 + this.DifferenceListStatus.GetHashCode();
                if (this.ShipmentsInTransit != null)
                    hash = hash * 59 + this.ShipmentsInTransit.GetHashCode();
                if (this.ShipmentsAverageReceivedPercentage != null)
                    hash = hash * 59 + this.ShipmentsAverageReceivedPercentage.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
