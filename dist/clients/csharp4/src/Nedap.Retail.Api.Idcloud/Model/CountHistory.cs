/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// CountHistory
    /// </summary>
    [DataContract]
    public partial class CountHistory :  IEquatable<CountHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountHistory" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Location">Location.</param>
        /// <param name="EventTime">EventTime.</param>
        /// <param name="CountedQuantity">CountedQuantity.</param>
        /// <param name="CountedGtinQuantity">CountedGtinQuantity.</param>
        /// <param name="NotCountedQuantity">NotCountedQuantity.</param>
        /// <param name="NotCountedGtinQuantity">NotCountedGtinQuantity.</param>
        /// <param name="CountedGtins">CountedGtins.</param>
        /// <param name="CountedQuantities">CountedQuantities.</param>
        /// <param name="CountedArticles">CountedArticles.</param>
        /// <param name="NotCountedGtins">NotCountedGtins.</param>
        /// <param name="NotCountedQuantities">NotCountedQuantities.</param>
        /// <param name="NotCountedArticles">NotCountedArticles.</param>
        public CountHistory(string Id = default(string), string Location = default(string), DateTime? EventTime = default(DateTime?), int? CountedQuantity = default(int?), int? CountedGtinQuantity = default(int?), int? NotCountedQuantity = default(int?), int? NotCountedGtinQuantity = default(int?), List<string> CountedGtins = default(List<string>), List<int?> CountedQuantities = default(List<int?>), List<Article> CountedArticles = default(List<Article>), List<string> NotCountedGtins = default(List<string>), List<int?> NotCountedQuantities = default(List<int?>), List<Article> NotCountedArticles = default(List<Article>))
        {
            this.Id = Id;
            this.Location = Location;
            this.EventTime = EventTime;
            this.CountedQuantity = CountedQuantity;
            this.CountedGtinQuantity = CountedGtinQuantity;
            this.NotCountedQuantity = NotCountedQuantity;
            this.NotCountedGtinQuantity = NotCountedGtinQuantity;
            this.CountedGtins = CountedGtins;
            this.CountedQuantities = CountedQuantities;
            this.CountedArticles = CountedArticles;
            this.NotCountedGtins = NotCountedGtins;
            this.NotCountedQuantities = NotCountedQuantities;
            this.NotCountedArticles = NotCountedArticles;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Gets or Sets EventTime
        /// </summary>
        [DataMember(Name="event_time", EmitDefaultValue=false)]
        public DateTime? EventTime { get; set; }
        /// <summary>
        /// Gets or Sets CountedQuantity
        /// </summary>
        [DataMember(Name="counted_quantity", EmitDefaultValue=false)]
        public int? CountedQuantity { get; set; }
        /// <summary>
        /// Gets or Sets CountedGtinQuantity
        /// </summary>
        [DataMember(Name="counted_gtin_quantity", EmitDefaultValue=false)]
        public int? CountedGtinQuantity { get; set; }
        /// <summary>
        /// Gets or Sets NotCountedQuantity
        /// </summary>
        [DataMember(Name="not_counted_quantity", EmitDefaultValue=false)]
        public int? NotCountedQuantity { get; set; }
        /// <summary>
        /// Gets or Sets NotCountedGtinQuantity
        /// </summary>
        [DataMember(Name="not_counted_gtin_quantity", EmitDefaultValue=false)]
        public int? NotCountedGtinQuantity { get; set; }
        /// <summary>
        /// Gets or Sets CountedGtins
        /// </summary>
        [DataMember(Name="counted_gtins", EmitDefaultValue=false)]
        public List<string> CountedGtins { get; set; }
        /// <summary>
        /// Gets or Sets CountedQuantities
        /// </summary>
        [DataMember(Name="counted_quantities", EmitDefaultValue=false)]
        public List<int?> CountedQuantities { get; set; }
        /// <summary>
        /// Gets or Sets CountedArticles
        /// </summary>
        [DataMember(Name="counted_articles", EmitDefaultValue=false)]
        public List<Article> CountedArticles { get; set; }
        /// <summary>
        /// Gets or Sets NotCountedGtins
        /// </summary>
        [DataMember(Name="not_counted_gtins", EmitDefaultValue=false)]
        public List<string> NotCountedGtins { get; set; }
        /// <summary>
        /// Gets or Sets NotCountedQuantities
        /// </summary>
        [DataMember(Name="not_counted_quantities", EmitDefaultValue=false)]
        public List<int?> NotCountedQuantities { get; set; }
        /// <summary>
        /// Gets or Sets NotCountedArticles
        /// </summary>
        [DataMember(Name="not_counted_articles", EmitDefaultValue=false)]
        public List<Article> NotCountedArticles { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CountHistory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  CountedQuantity: ").Append(CountedQuantity).Append("\n");
            sb.Append("  CountedGtinQuantity: ").Append(CountedGtinQuantity).Append("\n");
            sb.Append("  NotCountedQuantity: ").Append(NotCountedQuantity).Append("\n");
            sb.Append("  NotCountedGtinQuantity: ").Append(NotCountedGtinQuantity).Append("\n");
            sb.Append("  CountedGtins: ").Append(CountedGtins).Append("\n");
            sb.Append("  CountedQuantities: ").Append(CountedQuantities).Append("\n");
            sb.Append("  CountedArticles: ").Append(CountedArticles).Append("\n");
            sb.Append("  NotCountedGtins: ").Append(NotCountedGtins).Append("\n");
            sb.Append("  NotCountedQuantities: ").Append(NotCountedQuantities).Append("\n");
            sb.Append("  NotCountedArticles: ").Append(NotCountedArticles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CountHistory);
        }

        /// <summary>
        /// Returns true if CountHistory instances are equal
        /// </summary>
        /// <param name="other">Instance of CountHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountHistory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.EventTime == other.EventTime ||
                    this.EventTime != null &&
                    this.EventTime.Equals(other.EventTime)
                ) && 
                (
                    this.CountedQuantity == other.CountedQuantity ||
                    this.CountedQuantity != null &&
                    this.CountedQuantity.Equals(other.CountedQuantity)
                ) && 
                (
                    this.CountedGtinQuantity == other.CountedGtinQuantity ||
                    this.CountedGtinQuantity != null &&
                    this.CountedGtinQuantity.Equals(other.CountedGtinQuantity)
                ) && 
                (
                    this.NotCountedQuantity == other.NotCountedQuantity ||
                    this.NotCountedQuantity != null &&
                    this.NotCountedQuantity.Equals(other.NotCountedQuantity)
                ) && 
                (
                    this.NotCountedGtinQuantity == other.NotCountedGtinQuantity ||
                    this.NotCountedGtinQuantity != null &&
                    this.NotCountedGtinQuantity.Equals(other.NotCountedGtinQuantity)
                ) && 
                (
                    this.CountedGtins == other.CountedGtins ||
                    this.CountedGtins != null &&
                    this.CountedGtins.SequenceEqual(other.CountedGtins)
                ) && 
                (
                    this.CountedQuantities == other.CountedQuantities ||
                    this.CountedQuantities != null &&
                    this.CountedQuantities.SequenceEqual(other.CountedQuantities)
                ) && 
                (
                    this.CountedArticles == other.CountedArticles ||
                    this.CountedArticles != null &&
                    this.CountedArticles.SequenceEqual(other.CountedArticles)
                ) && 
                (
                    this.NotCountedGtins == other.NotCountedGtins ||
                    this.NotCountedGtins != null &&
                    this.NotCountedGtins.SequenceEqual(other.NotCountedGtins)
                ) && 
                (
                    this.NotCountedQuantities == other.NotCountedQuantities ||
                    this.NotCountedQuantities != null &&
                    this.NotCountedQuantities.SequenceEqual(other.NotCountedQuantities)
                ) && 
                (
                    this.NotCountedArticles == other.NotCountedArticles ||
                    this.NotCountedArticles != null &&
                    this.NotCountedArticles.SequenceEqual(other.NotCountedArticles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.EventTime != null)
                    hash = hash * 59 + this.EventTime.GetHashCode();
                if (this.CountedQuantity != null)
                    hash = hash * 59 + this.CountedQuantity.GetHashCode();
                if (this.CountedGtinQuantity != null)
                    hash = hash * 59 + this.CountedGtinQuantity.GetHashCode();
                if (this.NotCountedQuantity != null)
                    hash = hash * 59 + this.NotCountedQuantity.GetHashCode();
                if (this.NotCountedGtinQuantity != null)
                    hash = hash * 59 + this.NotCountedGtinQuantity.GetHashCode();
                if (this.CountedGtins != null)
                    hash = hash * 59 + this.CountedGtins.GetHashCode();
                if (this.CountedQuantities != null)
                    hash = hash * 59 + this.CountedQuantities.GetHashCode();
                if (this.CountedArticles != null)
                    hash = hash * 59 + this.CountedArticles.GetHashCode();
                if (this.NotCountedGtins != null)
                    hash = hash * 59 + this.NotCountedGtins.GetHashCode();
                if (this.NotCountedQuantities != null)
                    hash = hash * 59 + this.NotCountedQuantities.GetHashCode();
                if (this.NotCountedArticles != null)
                    hash = hash * 59 + this.NotCountedArticles.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
