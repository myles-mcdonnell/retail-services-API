/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// EpcisEvent
    /// </summary>
    [DataContract]
    public partial class EpcisEvent :  IEquatable<EpcisEvent>, IValidatableObject
    {
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Objectevent for "object_event"
            /// </summary>
            [EnumMember(Value = "object_event")]
            Objectevent,
            
            /// <summary>
            /// Enum Aggregationevent for "aggregation_event"
            /// </summary>
            [EnumMember(Value = "aggregation_event")]
            Aggregationevent,
            
            /// <summary>
            /// Enum Transactionevent for "transaction_event"
            /// </summary>
            [EnumMember(Value = "transaction_event")]
            Transactionevent,
            
            /// <summary>
            /// Enum Quantityevent for "quantity_event"
            /// </summary>
            [EnumMember(Value = "quantity_event")]
            Quantityevent,
            
            /// <summary>
            /// Enum Transformationevent for "transformation_event"
            /// </summary>
            [EnumMember(Value = "transformation_event")]
            Transformationevent
        }

        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum ADD for "ADD"
            /// </summary>
            [EnumMember(Value = "ADD")]
            ADD,
            
            /// <summary>
            /// Enum OBSERVE for "OBSERVE"
            /// </summary>
            [EnumMember(Value = "OBSERVE")]
            OBSERVE,
            
            /// <summary>
            /// Enum DELETE for "DELETE"
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE
        }

        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EpcisEvent" /> class.
        /// </summary>
        /// <param name="Id">Identifier, unique per organization, that identifies the EPCIS event..</param>
        /// <param name="Type">See EPCIS version 1.1.</param>
        /// <param name="Action">See EPCIS version 1.1.</param>
        /// <param name="Disposition">See EPCIS version 1.1.</param>
        /// <param name="StoredId">Identifier, globally unique. Automatically created by !D Cloud when it&#39;s stored in !DCloud..</param>
        /// <param name="EventId">(Optional) A \&quot;globally unique identifier\&quot; for this event. This is used to mark the events as a corrective event for an event which is marked as in error by an ErrorDeclaration. As this \&quot;corrective\&quot; event can become erroneous as well, it&#39;s not so globally unique. This is specified in EPCIS-standard-1.2-draft and is not implemented in !DCloud..</param>
        /// <param name="EventTime">The date and time at which the EPCIS Capturing Applications asserts the event occurred. See EPCIS version 1.1.</param>
        /// <param name="RecordTime">The date and time at which this event was recorded by an EPCIS Repository. If a client adds record_time, it will be overridden by the server. See EPCIS version 1.1.</param>
        /// <param name="EventTimeZoneOffset">The time zone offset in effect at the time and place the event occurred, expressed as an offset from UTC. Values range from -14:59 to +14:59. See EPCIS version 1.1.</param>
        /// <param name="BizStep">See EPCIS version 1.1.</param>
        /// <param name="BizLocation">See EPCIS version 1.1.</param>
        /// <param name="ReadPoint">See EPCIS version 1.1.</param>
        /// <param name="SourceList">See EPCIS version 1.1.</param>
        /// <param name="DestinationList">See EPCIS version 1.1.</param>
        /// <param name="BizTransactionList">See EPCIS version 1.1.</param>
        /// <param name="ErrorDeclaration">See EPCIS version 1.1.</param>
        /// <param name="ParentId">ParentId.</param>
        /// <param name="ChildEpcs">ChildEpcs.</param>
        /// <param name="ChildQuantityList">ChildQuantityList.</param>
        /// <param name="Ilmd">Ilmd.</param>
        /// <param name="EpcList">EpcList.</param>
        /// <param name="QuantityList">QuantityList.</param>
        /// <param name="InputEpcList">InputEpcList.</param>
        /// <param name="OutputEpcList">OutputEpcList.</param>
        /// <param name="InputQuantityList">InputQuantityList.</param>
        /// <param name="OutputQuantityList">OutputQuantityList.</param>
        /// <param name="TransformationId">TransformationId.</param>
        public EpcisEvent(string Id = default(string), TypeEnum? Type = default(TypeEnum?), ActionEnum? Action = default(ActionEnum?), string Disposition = default(string), Guid? StoredId = default(Guid?), string EventId = default(string), DateTime? EventTime = default(DateTime?), DateTime? RecordTime = default(DateTime?), string EventTimeZoneOffset = default(string), string BizStep = default(string), string BizLocation = default(string), string ReadPoint = default(string), List<SourceElement> SourceList = default(List<SourceElement>), List<DestinationElement> DestinationList = default(List<DestinationElement>), List<BizTransactionElement> BizTransactionList = default(List<BizTransactionElement>), ErrorDeclaration ErrorDeclaration = default(ErrorDeclaration), string ParentId = default(string), List<string> ChildEpcs = default(List<string>), List<QuantityElement> ChildQuantityList = default(List<QuantityElement>), string Ilmd = default(string), List<string> EpcList = default(List<string>), List<QuantityElement> QuantityList = default(List<QuantityElement>), List<string> InputEpcList = default(List<string>), List<string> OutputEpcList = default(List<string>), List<QuantityElement> InputQuantityList = default(List<QuantityElement>), List<QuantityElement> OutputQuantityList = default(List<QuantityElement>), string TransformationId = default(string))
        {
            this.Id = Id;
            this.Type = Type;
            this.Action = Action;
            this.Disposition = Disposition;
            this.StoredId = StoredId;
            this.EventId = EventId;
            this.EventTime = EventTime;
            this.RecordTime = RecordTime;
            this.EventTimeZoneOffset = EventTimeZoneOffset;
            this.BizStep = BizStep;
            this.BizLocation = BizLocation;
            this.ReadPoint = ReadPoint;
            this.SourceList = SourceList;
            this.DestinationList = DestinationList;
            this.BizTransactionList = BizTransactionList;
            this.ErrorDeclaration = ErrorDeclaration;
            this.ParentId = ParentId;
            this.ChildEpcs = ChildEpcs;
            this.ChildQuantityList = ChildQuantityList;
            this.Ilmd = Ilmd;
            this.EpcList = EpcList;
            this.QuantityList = QuantityList;
            this.InputEpcList = InputEpcList;
            this.OutputEpcList = OutputEpcList;
            this.InputQuantityList = InputQuantityList;
            this.OutputQuantityList = OutputQuantityList;
            this.TransformationId = TransformationId;
        }
        
        /// <summary>
        /// Identifier, unique per organization, that identifies the EPCIS event.
        /// </summary>
        /// <value>Identifier, unique per organization, that identifies the EPCIS event.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="disposition", EmitDefaultValue=false)]
        public string Disposition { get; set; }
        /// <summary>
        /// Identifier, globally unique. Automatically created by !D Cloud when it&#39;s stored in !DCloud.
        /// </summary>
        /// <value>Identifier, globally unique. Automatically created by !D Cloud when it&#39;s stored in !DCloud.</value>
        [DataMember(Name="stored_id", EmitDefaultValue=false)]
        public Guid? StoredId { get; set; }
        /// <summary>
        /// (Optional) A \&quot;globally unique identifier\&quot; for this event. This is used to mark the events as a corrective event for an event which is marked as in error by an ErrorDeclaration. As this \&quot;corrective\&quot; event can become erroneous as well, it&#39;s not so globally unique. This is specified in EPCIS-standard-1.2-draft and is not implemented in !DCloud.
        /// </summary>
        /// <value>(Optional) A \&quot;globally unique identifier\&quot; for this event. This is used to mark the events as a corrective event for an event which is marked as in error by an ErrorDeclaration. As this \&quot;corrective\&quot; event can become erroneous as well, it&#39;s not so globally unique. This is specified in EPCIS-standard-1.2-draft and is not implemented in !DCloud.</value>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }
        /// <summary>
        /// The date and time at which the EPCIS Capturing Applications asserts the event occurred. See EPCIS version 1.1
        /// </summary>
        /// <value>The date and time at which the EPCIS Capturing Applications asserts the event occurred. See EPCIS version 1.1</value>
        [DataMember(Name="event_time", EmitDefaultValue=false)]
        public DateTime? EventTime { get; set; }
        /// <summary>
        /// The date and time at which this event was recorded by an EPCIS Repository. If a client adds record_time, it will be overridden by the server. See EPCIS version 1.1
        /// </summary>
        /// <value>The date and time at which this event was recorded by an EPCIS Repository. If a client adds record_time, it will be overridden by the server. See EPCIS version 1.1</value>
        [DataMember(Name="record_time", EmitDefaultValue=false)]
        public DateTime? RecordTime { get; set; }
        /// <summary>
        /// The time zone offset in effect at the time and place the event occurred, expressed as an offset from UTC. Values range from -14:59 to +14:59. See EPCIS version 1.1
        /// </summary>
        /// <value>The time zone offset in effect at the time and place the event occurred, expressed as an offset from UTC. Values range from -14:59 to +14:59. See EPCIS version 1.1</value>
        [DataMember(Name="event_time_zone_offset", EmitDefaultValue=false)]
        public string EventTimeZoneOffset { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="biz_step", EmitDefaultValue=false)]
        public string BizStep { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="biz_location", EmitDefaultValue=false)]
        public string BizLocation { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="read_point", EmitDefaultValue=false)]
        public string ReadPoint { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="source_list", EmitDefaultValue=false)]
        public List<SourceElement> SourceList { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="destination_list", EmitDefaultValue=false)]
        public List<DestinationElement> DestinationList { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="biz_transaction_list", EmitDefaultValue=false)]
        public List<BizTransactionElement> BizTransactionList { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="error_declaration", EmitDefaultValue=false)]
        public ErrorDeclaration ErrorDeclaration { get; set; }
        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parent_id", EmitDefaultValue=false)]
        public string ParentId { get; set; }
        /// <summary>
        /// Gets or Sets ChildEpcs
        /// </summary>
        [DataMember(Name="child_epcs", EmitDefaultValue=false)]
        public List<string> ChildEpcs { get; set; }
        /// <summary>
        /// Gets or Sets ChildQuantityList
        /// </summary>
        [DataMember(Name="child_quantity_list", EmitDefaultValue=false)]
        public List<QuantityElement> ChildQuantityList { get; set; }
        /// <summary>
        /// Gets or Sets Ilmd
        /// </summary>
        [DataMember(Name="ilmd", EmitDefaultValue=false)]
        public string Ilmd { get; set; }
        /// <summary>
        /// Gets or Sets EpcList
        /// </summary>
        [DataMember(Name="epc_list", EmitDefaultValue=false)]
        public List<string> EpcList { get; set; }
        /// <summary>
        /// Gets or Sets QuantityList
        /// </summary>
        [DataMember(Name="quantity_list", EmitDefaultValue=false)]
        public List<QuantityElement> QuantityList { get; set; }
        /// <summary>
        /// Gets or Sets InputEpcList
        /// </summary>
        [DataMember(Name="input_epc_list", EmitDefaultValue=false)]
        public List<string> InputEpcList { get; set; }
        /// <summary>
        /// Gets or Sets OutputEpcList
        /// </summary>
        [DataMember(Name="output_epc_list", EmitDefaultValue=false)]
        public List<string> OutputEpcList { get; set; }
        /// <summary>
        /// Gets or Sets InputQuantityList
        /// </summary>
        [DataMember(Name="input_quantity_list", EmitDefaultValue=false)]
        public List<QuantityElement> InputQuantityList { get; set; }
        /// <summary>
        /// Gets or Sets OutputQuantityList
        /// </summary>
        [DataMember(Name="output_quantity_list", EmitDefaultValue=false)]
        public List<QuantityElement> OutputQuantityList { get; set; }
        /// <summary>
        /// Gets or Sets TransformationId
        /// </summary>
        [DataMember(Name="transformation_id", EmitDefaultValue=false)]
        public string TransformationId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EpcisEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  StoredId: ").Append(StoredId).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  RecordTime: ").Append(RecordTime).Append("\n");
            sb.Append("  EventTimeZoneOffset: ").Append(EventTimeZoneOffset).Append("\n");
            sb.Append("  BizStep: ").Append(BizStep).Append("\n");
            sb.Append("  BizLocation: ").Append(BizLocation).Append("\n");
            sb.Append("  ReadPoint: ").Append(ReadPoint).Append("\n");
            sb.Append("  SourceList: ").Append(SourceList).Append("\n");
            sb.Append("  DestinationList: ").Append(DestinationList).Append("\n");
            sb.Append("  BizTransactionList: ").Append(BizTransactionList).Append("\n");
            sb.Append("  ErrorDeclaration: ").Append(ErrorDeclaration).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ChildEpcs: ").Append(ChildEpcs).Append("\n");
            sb.Append("  ChildQuantityList: ").Append(ChildQuantityList).Append("\n");
            sb.Append("  Ilmd: ").Append(Ilmd).Append("\n");
            sb.Append("  EpcList: ").Append(EpcList).Append("\n");
            sb.Append("  QuantityList: ").Append(QuantityList).Append("\n");
            sb.Append("  InputEpcList: ").Append(InputEpcList).Append("\n");
            sb.Append("  OutputEpcList: ").Append(OutputEpcList).Append("\n");
            sb.Append("  InputQuantityList: ").Append(InputQuantityList).Append("\n");
            sb.Append("  OutputQuantityList: ").Append(OutputQuantityList).Append("\n");
            sb.Append("  TransformationId: ").Append(TransformationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EpcisEvent);
        }

        /// <summary>
        /// Returns true if EpcisEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of EpcisEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EpcisEvent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Disposition == other.Disposition ||
                    this.Disposition != null &&
                    this.Disposition.Equals(other.Disposition)
                ) && 
                (
                    this.StoredId == other.StoredId ||
                    this.StoredId != null &&
                    this.StoredId.Equals(other.StoredId)
                ) && 
                (
                    this.EventId == other.EventId ||
                    this.EventId != null &&
                    this.EventId.Equals(other.EventId)
                ) && 
                (
                    this.EventTime == other.EventTime ||
                    this.EventTime != null &&
                    this.EventTime.Equals(other.EventTime)
                ) && 
                (
                    this.RecordTime == other.RecordTime ||
                    this.RecordTime != null &&
                    this.RecordTime.Equals(other.RecordTime)
                ) && 
                (
                    this.EventTimeZoneOffset == other.EventTimeZoneOffset ||
                    this.EventTimeZoneOffset != null &&
                    this.EventTimeZoneOffset.Equals(other.EventTimeZoneOffset)
                ) && 
                (
                    this.BizStep == other.BizStep ||
                    this.BizStep != null &&
                    this.BizStep.Equals(other.BizStep)
                ) && 
                (
                    this.BizLocation == other.BizLocation ||
                    this.BizLocation != null &&
                    this.BizLocation.Equals(other.BizLocation)
                ) && 
                (
                    this.ReadPoint == other.ReadPoint ||
                    this.ReadPoint != null &&
                    this.ReadPoint.Equals(other.ReadPoint)
                ) && 
                (
                    this.SourceList == other.SourceList ||
                    this.SourceList != null &&
                    this.SourceList.SequenceEqual(other.SourceList)
                ) && 
                (
                    this.DestinationList == other.DestinationList ||
                    this.DestinationList != null &&
                    this.DestinationList.SequenceEqual(other.DestinationList)
                ) && 
                (
                    this.BizTransactionList == other.BizTransactionList ||
                    this.BizTransactionList != null &&
                    this.BizTransactionList.SequenceEqual(other.BizTransactionList)
                ) && 
                (
                    this.ErrorDeclaration == other.ErrorDeclaration ||
                    this.ErrorDeclaration != null &&
                    this.ErrorDeclaration.Equals(other.ErrorDeclaration)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.ChildEpcs == other.ChildEpcs ||
                    this.ChildEpcs != null &&
                    this.ChildEpcs.SequenceEqual(other.ChildEpcs)
                ) && 
                (
                    this.ChildQuantityList == other.ChildQuantityList ||
                    this.ChildQuantityList != null &&
                    this.ChildQuantityList.SequenceEqual(other.ChildQuantityList)
                ) && 
                (
                    this.Ilmd == other.Ilmd ||
                    this.Ilmd != null &&
                    this.Ilmd.Equals(other.Ilmd)
                ) && 
                (
                    this.EpcList == other.EpcList ||
                    this.EpcList != null &&
                    this.EpcList.SequenceEqual(other.EpcList)
                ) && 
                (
                    this.QuantityList == other.QuantityList ||
                    this.QuantityList != null &&
                    this.QuantityList.SequenceEqual(other.QuantityList)
                ) && 
                (
                    this.InputEpcList == other.InputEpcList ||
                    this.InputEpcList != null &&
                    this.InputEpcList.SequenceEqual(other.InputEpcList)
                ) && 
                (
                    this.OutputEpcList == other.OutputEpcList ||
                    this.OutputEpcList != null &&
                    this.OutputEpcList.SequenceEqual(other.OutputEpcList)
                ) && 
                (
                    this.InputQuantityList == other.InputQuantityList ||
                    this.InputQuantityList != null &&
                    this.InputQuantityList.SequenceEqual(other.InputQuantityList)
                ) && 
                (
                    this.OutputQuantityList == other.OutputQuantityList ||
                    this.OutputQuantityList != null &&
                    this.OutputQuantityList.SequenceEqual(other.OutputQuantityList)
                ) && 
                (
                    this.TransformationId == other.TransformationId ||
                    this.TransformationId != null &&
                    this.TransformationId.Equals(other.TransformationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Disposition != null)
                    hash = hash * 59 + this.Disposition.GetHashCode();
                if (this.StoredId != null)
                    hash = hash * 59 + this.StoredId.GetHashCode();
                if (this.EventId != null)
                    hash = hash * 59 + this.EventId.GetHashCode();
                if (this.EventTime != null)
                    hash = hash * 59 + this.EventTime.GetHashCode();
                if (this.RecordTime != null)
                    hash = hash * 59 + this.RecordTime.GetHashCode();
                if (this.EventTimeZoneOffset != null)
                    hash = hash * 59 + this.EventTimeZoneOffset.GetHashCode();
                if (this.BizStep != null)
                    hash = hash * 59 + this.BizStep.GetHashCode();
                if (this.BizLocation != null)
                    hash = hash * 59 + this.BizLocation.GetHashCode();
                if (this.ReadPoint != null)
                    hash = hash * 59 + this.ReadPoint.GetHashCode();
                if (this.SourceList != null)
                    hash = hash * 59 + this.SourceList.GetHashCode();
                if (this.DestinationList != null)
                    hash = hash * 59 + this.DestinationList.GetHashCode();
                if (this.BizTransactionList != null)
                    hash = hash * 59 + this.BizTransactionList.GetHashCode();
                if (this.ErrorDeclaration != null)
                    hash = hash * 59 + this.ErrorDeclaration.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                if (this.ChildEpcs != null)
                    hash = hash * 59 + this.ChildEpcs.GetHashCode();
                if (this.ChildQuantityList != null)
                    hash = hash * 59 + this.ChildQuantityList.GetHashCode();
                if (this.Ilmd != null)
                    hash = hash * 59 + this.Ilmd.GetHashCode();
                if (this.EpcList != null)
                    hash = hash * 59 + this.EpcList.GetHashCode();
                if (this.QuantityList != null)
                    hash = hash * 59 + this.QuantityList.GetHashCode();
                if (this.InputEpcList != null)
                    hash = hash * 59 + this.InputEpcList.GetHashCode();
                if (this.OutputEpcList != null)
                    hash = hash * 59 + this.OutputEpcList.GetHashCode();
                if (this.InputQuantityList != null)
                    hash = hash * 59 + this.InputQuantityList.GetHashCode();
                if (this.OutputQuantityList != null)
                    hash = hash * 59 + this.OutputQuantityList.GetHashCode();
                if (this.TransformationId != null)
                    hash = hash * 59 + this.TransformationId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
