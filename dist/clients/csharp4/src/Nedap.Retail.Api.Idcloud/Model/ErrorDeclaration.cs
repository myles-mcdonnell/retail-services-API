/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// A ErrorDeclaration is a structure that identifies a prior EPCISEvent is in error.
    /// </summary>
    [DataContract]
    public partial class ErrorDeclaration :  IEquatable<ErrorDeclaration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDeclaration" /> class.
        /// </summary>
        /// <param name="DeclarationTime">See EPCIS version 1.1.</param>
        /// <param name="Reason">See EPCIS version 1.1.</param>
        /// <param name="CorrectiveEventIds">See EPCIS version 1.1.</param>
        public ErrorDeclaration(DateTime? DeclarationTime = default(DateTime?), string Reason = default(string), List<string> CorrectiveEventIds = default(List<string>))
        {
            this.DeclarationTime = DeclarationTime;
            this.Reason = Reason;
            this.CorrectiveEventIds = CorrectiveEventIds;
        }
        
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="declaration_time", EmitDefaultValue=false)]
        public DateTime? DeclarationTime { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="corrective_event_ids", EmitDefaultValue=false)]
        public List<string> CorrectiveEventIds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorDeclaration {\n");
            sb.Append("  DeclarationTime: ").Append(DeclarationTime).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  CorrectiveEventIds: ").Append(CorrectiveEventIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ErrorDeclaration);
        }

        /// <summary>
        /// Returns true if ErrorDeclaration instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorDeclaration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorDeclaration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DeclarationTime == other.DeclarationTime ||
                    this.DeclarationTime != null &&
                    this.DeclarationTime.Equals(other.DeclarationTime)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.CorrectiveEventIds == other.CorrectiveEventIds ||
                    this.CorrectiveEventIds != null &&
                    this.CorrectiveEventIds.SequenceEqual(other.CorrectiveEventIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DeclarationTime != null)
                    hash = hash * 59 + this.DeclarationTime.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.CorrectiveEventIds != null)
                    hash = hash * 59 + this.CorrectiveEventIds.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
