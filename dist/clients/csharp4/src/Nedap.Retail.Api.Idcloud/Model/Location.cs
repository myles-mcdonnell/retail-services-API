/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// Location
    /// </summary>
    [DataContract]
    public partial class Location :  IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum COUNTRY for "COUNTRY"
            /// </summary>
            [EnumMember(Value = "COUNTRY")]
            COUNTRY,
            
            /// <summary>
            /// Enum GROUP for "GROUP"
            /// </summary>
            [EnumMember(Value = "GROUP")]
            GROUP,
            
            /// <summary>
            /// Enum SITE for "SITE"
            /// </summary>
            [EnumMember(Value = "SITE")]
            SITE,
            
            /// <summary>
            /// Enum LOCATION for "LOCATION"
            /// </summary>
            [EnumMember(Value = "LOCATION")]
            LOCATION,
            
            /// <summary>
            /// Enum LOCATIONINTERNAL for "LOCATION_INTERNAL"
            /// </summary>
            [EnumMember(Value = "LOCATION_INTERNAL")]
            LOCATIONINTERNAL,
            
            /// <summary>
            /// Enum LOCATIONEXTERNAL for "LOCATION_EXTERNAL"
            /// </summary>
            [EnumMember(Value = "LOCATION_EXTERNAL")]
            LOCATIONEXTERNAL
        }

        /// <summary>
        /// Gets or Sets Subtype
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubtypeEnum
        {
            
            /// <summary>
            /// Enum DEMO for "DEMO"
            /// </summary>
            [EnumMember(Value = "DEMO")]
            DEMO,
            
            /// <summary>
            /// Enum DISTRIBUTIONCENTRE for "DISTRIBUTION_CENTRE"
            /// </summary>
            [EnumMember(Value = "DISTRIBUTION_CENTRE")]
            DISTRIBUTIONCENTRE,
            
            /// <summary>
            /// Enum DIYSHOP for "DIY_SHOP"
            /// </summary>
            [EnumMember(Value = "DIY_SHOP")]
            DIYSHOP,
            
            /// <summary>
            /// Enum ELECTRONICS for "ELECTRONICS"
            /// </summary>
            [EnumMember(Value = "ELECTRONICS")]
            ELECTRONICS,
            
            /// <summary>
            /// Enum FASHION for "FASHION"
            /// </summary>
            [EnumMember(Value = "FASHION")]
            FASHION,
            
            /// <summary>
            /// Enum HEALTHBEAUTY for "HEALTH_BEAUTY"
            /// </summary>
            [EnumMember(Value = "HEALTH_BEAUTY")]
            HEALTHBEAUTY,
            
            /// <summary>
            /// Enum OFFICE for "OFFICE"
            /// </summary>
            [EnumMember(Value = "OFFICE")]
            OFFICE,
            
            /// <summary>
            /// Enum PRINTSHOP for "PRINT_SHOP"
            /// </summary>
            [EnumMember(Value = "PRINT_SHOP")]
            PRINTSHOP,
            
            /// <summary>
            /// Enum PRODUCTIONFACILITY for "PRODUCTION_FACILITY"
            /// </summary>
            [EnumMember(Value = "PRODUCTION_FACILITY")]
            PRODUCTIONFACILITY,
            
            /// <summary>
            /// Enum SHOPPINGMALL for "SHOPPING_MALL"
            /// </summary>
            [EnumMember(Value = "SHOPPING_MALL")]
            SHOPPINGMALL,
            
            /// <summary>
            /// Enum SPORT for "SPORT"
            /// </summary>
            [EnumMember(Value = "SPORT")]
            SPORT,
            
            /// <summary>
            /// Enum SUPERMARKET for "SUPERMARKET"
            /// </summary>
            [EnumMember(Value = "SUPERMARKET")]
            SUPERMARKET,
            
            /// <summary>
            /// Enum OTHER for "OTHER"
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER,
            
            /// <summary>
            /// Enum GOODSRECEIVINGAREA for "GOODS_RECEIVING_AREA"
            /// </summary>
            [EnumMember(Value = "GOODS_RECEIVING_AREA")]
            GOODSRECEIVINGAREA,
            
            /// <summary>
            /// Enum STOCKROOM for "STOCK_ROOM"
            /// </summary>
            [EnumMember(Value = "STOCK_ROOM")]
            STOCKROOM,
            
            /// <summary>
            /// Enum SALESFLOOR for "SALES_FLOOR"
            /// </summary>
            [EnumMember(Value = "SALES_FLOOR")]
            SALESFLOOR,
            
            /// <summary>
            /// Enum OFFSITESTORAGE for "OFFSITE_STORAGE"
            /// </summary>
            [EnumMember(Value = "OFFSITE_STORAGE")]
            OFFSITESTORAGE
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets Subtype
        /// </summary>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public SubtypeEnum? Subtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Subtype">Subtype.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Address">Address.</param>
        /// <param name="Children">Children.</param>
        /// <param name="ParentId">ParentId.</param>
        /// <param name="StoreCode">StoreCode.</param>
        public Location(string Id = default(string), TypeEnum? Type = default(TypeEnum?), SubtypeEnum? Subtype = default(SubtypeEnum?), string Name = default(string), Address Address = default(Address), List<Location> Children = default(List<Location>), string ParentId = default(string), string StoreCode = default(string))
        {
            this.Id = Id;
            this.Type = Type;
            this.Subtype = Subtype;
            this.Name = Name;
            this.Address = Address;
            this.Children = Children;
            this.ParentId = ParentId;
            this.StoreCode = StoreCode;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }
        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<Location> Children { get; set; }
        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parent_id", EmitDefaultValue=false)]
        public string ParentId { get; set; }
        /// <summary>
        /// Gets or Sets StoreCode
        /// </summary>
        [DataMember(Name="store_code", EmitDefaultValue=false)]
        public string StoreCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  StoreCode: ").Append(StoreCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="other">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Children == other.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(other.Children)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.StoreCode == other.StoreCode ||
                    this.StoreCode != null &&
                    this.StoreCode.Equals(other.StoreCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Children != null)
                    hash = hash * 59 + this.Children.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                if (this.StoreCode != null)
                    hash = hash * 59 + this.StoreCode.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
