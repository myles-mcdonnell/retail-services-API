/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// WorkflowEvent
    /// </summary>
    [DataContract]
    public partial class WorkflowEvent :  IEquatable<WorkflowEvent>, IValidatableObject
    {
        /// <summary>
        /// Type of the workflow
        /// </summary>
        /// <value>Type of the workflow</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Cyclecountstarted for "cycle_count_started"
            /// </summary>
            [EnumMember(Value = "cycle_count_started")]
            Cyclecountstarted,
            
            /// <summary>
            /// Enum Cyclecountfinished for "cycle_count_finished"
            /// </summary>
            [EnumMember(Value = "cycle_count_finished")]
            Cyclecountfinished,
            
            /// <summary>
            /// Enum Partialcountfinished for "partial_count_finished"
            /// </summary>
            [EnumMember(Value = "partial_count_finished")]
            Partialcountfinished,
            
            /// <summary>
            /// Enum Instorereplenishmentstarted for "in-store_replenishment_started"
            /// </summary>
            [EnumMember(Value = "in-store_replenishment_started")]
            Instorereplenishmentstarted
        }

        /// <summary>
        /// Type of the workflow
        /// </summary>
        /// <value>Type of the workflow</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowEvent" /> class.
        /// </summary>
        /// <param name="Type">Type of the workflow (required).</param>
        /// <param name="Location">The location for which the stock is defined. (required).</param>
        /// <param name="EventTime">Client-side date+time of registering that the count was finished. This is not the moment of sending the workflow event nor is it the moment when the last EPC was observed. (required).</param>
        /// <param name="StartTime">Optional. This is moment when the first EPC was observed. .</param>
        /// <param name="EpcCount">The total number of EPCs that were counted in the referenced message_ids..</param>
        /// <param name="MessageIds">Array of EPCIS event message IDs. These events contain the actual EPCs that were observed in this count. (required).</param>
        /// <param name="ClientId">ClientId.</param>
        public WorkflowEvent(TypeEnum? Type = default(TypeEnum?), string Location = default(string), DateTime? EventTime = default(DateTime?), DateTime? StartTime = default(DateTime?), long? EpcCount = default(long?), List<string> MessageIds = default(List<string>), string ClientId = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for WorkflowEvent and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Location" is required (not null)
            if (Location == null)
            {
                throw new InvalidDataException("Location is a required property for WorkflowEvent and cannot be null");
            }
            else
            {
                this.Location = Location;
            }
            // to ensure "EventTime" is required (not null)
            if (EventTime == null)
            {
                throw new InvalidDataException("EventTime is a required property for WorkflowEvent and cannot be null");
            }
            else
            {
                this.EventTime = EventTime;
            }
            // to ensure "MessageIds" is required (not null)
            if (MessageIds == null)
            {
                throw new InvalidDataException("MessageIds is a required property for WorkflowEvent and cannot be null");
            }
            else
            {
                this.MessageIds = MessageIds;
            }
            this.StartTime = StartTime;
            this.EpcCount = EpcCount;
            this.ClientId = ClientId;
        }
        
        /// <summary>
        /// The location for which the stock is defined.
        /// </summary>
        /// <value>The location for which the stock is defined.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Client-side date+time of registering that the count was finished. This is not the moment of sending the workflow event nor is it the moment when the last EPC was observed.
        /// </summary>
        /// <value>Client-side date+time of registering that the count was finished. This is not the moment of sending the workflow event nor is it the moment when the last EPC was observed.</value>
        [DataMember(Name="event_time", EmitDefaultValue=false)]
        public DateTime? EventTime { get; set; }
        /// <summary>
        /// Optional. This is moment when the first EPC was observed. 
        /// </summary>
        /// <value>Optional. This is moment when the first EPC was observed. </value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }
        /// <summary>
        /// The total number of EPCs that were counted in the referenced message_ids.
        /// </summary>
        /// <value>The total number of EPCs that were counted in the referenced message_ids.</value>
        [DataMember(Name="epc_count", EmitDefaultValue=false)]
        public long? EpcCount { get; set; }
        /// <summary>
        /// Array of EPCIS event message IDs. These events contain the actual EPCs that were observed in this count.
        /// </summary>
        /// <value>Array of EPCIS event message IDs. These events contain the actual EPCs that were observed in this count.</value>
        [DataMember(Name="message_ids", EmitDefaultValue=false)]
        public List<string> MessageIds { get; set; }
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowEvent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EpcCount: ").Append(EpcCount).Append("\n");
            sb.Append("  MessageIds: ").Append(MessageIds).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowEvent);
        }

        /// <summary>
        /// Returns true if WorkflowEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowEvent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.EventTime == other.EventTime ||
                    this.EventTime != null &&
                    this.EventTime.Equals(other.EventTime)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.EpcCount == other.EpcCount ||
                    this.EpcCount != null &&
                    this.EpcCount.Equals(other.EpcCount)
                ) && 
                (
                    this.MessageIds == other.MessageIds ||
                    this.MessageIds != null &&
                    this.MessageIds.SequenceEqual(other.MessageIds)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.EventTime != null)
                    hash = hash * 59 + this.EventTime.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.EpcCount != null)
                    hash = hash * 59 + this.EpcCount.GetHashCode();
                if (this.MessageIds != null)
                    hash = hash * 59 + this.MessageIds.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
