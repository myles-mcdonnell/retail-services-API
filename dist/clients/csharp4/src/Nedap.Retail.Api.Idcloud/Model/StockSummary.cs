/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// StockSummary
    /// </summary>
    [DataContract]
    public partial class StockSummary :  IEquatable<StockSummary>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ERP for "ERP"
            /// </summary>
            [EnumMember(Value = "ERP")]
            ERP,
            
            /// <summary>
            /// Enum RFIDCOUNT for "RFID_COUNT"
            /// </summary>
            [EnumMember(Value = "RFID_COUNT")]
            RFIDCOUNT,
            
            /// <summary>
            /// Enum REALTIMESNAPSHOT for "REALTIME_SNAPSHOT"
            /// </summary>
            [EnumMember(Value = "REALTIME_SNAPSHOT")]
            REALTIMESNAPSHOT
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACCEPTED for "ACCEPTED"
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED,
            
            /// <summary>
            /// Enum VALIDATING for "VALIDATING"
            /// </summary>
            [EnumMember(Value = "VALIDATING")]
            VALIDATING
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StockSummary" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Location">Location.</param>
        /// <param name="Type">Type.</param>
        /// <param name="EventTime">EventTime.</param>
        /// <param name="StartTime">StartTime.</param>
        /// <param name="ExternRef">ExternRef.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="ExcludedQuantity">ExcludedQuantity.</param>
        /// <param name="GtinQuantity">GtinQuantity.</param>
        /// <param name="ExcludedGtinQuantity">ExcludedGtinQuantity.</param>
        /// <param name="InUse">InUse (default to false).</param>
        /// <param name="ClientIds">ClientIds.</param>
        /// <param name="IsComplete">IsComplete (default to false).</param>
        public StockSummary(string Id = default(string), string Location = default(string), TypeEnum? Type = default(TypeEnum?), DateTime? EventTime = default(DateTime?), DateTime? StartTime = default(DateTime?), string ExternRef = default(string), StatusEnum? Status = default(StatusEnum?), int? Quantity = default(int?), int? ExcludedQuantity = default(int?), int? GtinQuantity = default(int?), int? ExcludedGtinQuantity = default(int?), bool? InUse = false, List<string> ClientIds = default(List<string>), bool? IsComplete = false)
        {
            this.Id = Id;
            this.Location = Location;
            this.Type = Type;
            this.EventTime = EventTime;
            this.StartTime = StartTime;
            this.ExternRef = ExternRef;
            this.Status = Status;
            this.Quantity = Quantity;
            this.ExcludedQuantity = ExcludedQuantity;
            this.GtinQuantity = GtinQuantity;
            this.ExcludedGtinQuantity = ExcludedGtinQuantity;
            // use default value if no "InUse" provided
            if (InUse == null)
            {
                this.InUse = false;
            }
            else
            {
                this.InUse = InUse;
            }
            this.ClientIds = ClientIds;
            // use default value if no "IsComplete" provided
            if (IsComplete == null)
            {
                this.IsComplete = false;
            }
            else
            {
                this.IsComplete = IsComplete;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Gets or Sets EventTime
        /// </summary>
        [DataMember(Name="event_time", EmitDefaultValue=false)]
        public DateTime? EventTime { get; set; }
        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }
        /// <summary>
        /// Gets or Sets ExternRef
        /// </summary>
        [DataMember(Name="extern_ref", EmitDefaultValue=false)]
        public string ExternRef { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets ExcludedQuantity
        /// </summary>
        [DataMember(Name="excluded_quantity", EmitDefaultValue=false)]
        public int? ExcludedQuantity { get; set; }
        /// <summary>
        /// Gets or Sets GtinQuantity
        /// </summary>
        [DataMember(Name="gtin_quantity", EmitDefaultValue=false)]
        public int? GtinQuantity { get; set; }
        /// <summary>
        /// Gets or Sets ExcludedGtinQuantity
        /// </summary>
        [DataMember(Name="excluded_gtin_quantity", EmitDefaultValue=false)]
        public int? ExcludedGtinQuantity { get; set; }
        /// <summary>
        /// Gets or Sets InUse
        /// </summary>
        [DataMember(Name="in_use", EmitDefaultValue=false)]
        public bool? InUse { get; set; }
        /// <summary>
        /// Gets or Sets ClientIds
        /// </summary>
        [DataMember(Name="client_ids", EmitDefaultValue=false)]
        public List<string> ClientIds { get; set; }
        /// <summary>
        /// Gets or Sets IsComplete
        /// </summary>
        [DataMember(Name="is_complete", EmitDefaultValue=false)]
        public bool? IsComplete { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StockSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  ExternRef: ").Append(ExternRef).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ExcludedQuantity: ").Append(ExcludedQuantity).Append("\n");
            sb.Append("  GtinQuantity: ").Append(GtinQuantity).Append("\n");
            sb.Append("  ExcludedGtinQuantity: ").Append(ExcludedGtinQuantity).Append("\n");
            sb.Append("  InUse: ").Append(InUse).Append("\n");
            sb.Append("  ClientIds: ").Append(ClientIds).Append("\n");
            sb.Append("  IsComplete: ").Append(IsComplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StockSummary);
        }

        /// <summary>
        /// Returns true if StockSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of StockSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.EventTime == other.EventTime ||
                    this.EventTime != null &&
                    this.EventTime.Equals(other.EventTime)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.ExternRef == other.ExternRef ||
                    this.ExternRef != null &&
                    this.ExternRef.Equals(other.ExternRef)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.ExcludedQuantity == other.ExcludedQuantity ||
                    this.ExcludedQuantity != null &&
                    this.ExcludedQuantity.Equals(other.ExcludedQuantity)
                ) && 
                (
                    this.GtinQuantity == other.GtinQuantity ||
                    this.GtinQuantity != null &&
                    this.GtinQuantity.Equals(other.GtinQuantity)
                ) && 
                (
                    this.ExcludedGtinQuantity == other.ExcludedGtinQuantity ||
                    this.ExcludedGtinQuantity != null &&
                    this.ExcludedGtinQuantity.Equals(other.ExcludedGtinQuantity)
                ) && 
                (
                    this.InUse == other.InUse ||
                    this.InUse != null &&
                    this.InUse.Equals(other.InUse)
                ) && 
                (
                    this.ClientIds == other.ClientIds ||
                    this.ClientIds != null &&
                    this.ClientIds.SequenceEqual(other.ClientIds)
                ) && 
                (
                    this.IsComplete == other.IsComplete ||
                    this.IsComplete != null &&
                    this.IsComplete.Equals(other.IsComplete)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.EventTime != null)
                    hash = hash * 59 + this.EventTime.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.ExternRef != null)
                    hash = hash * 59 + this.ExternRef.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.ExcludedQuantity != null)
                    hash = hash * 59 + this.ExcludedQuantity.GetHashCode();
                if (this.GtinQuantity != null)
                    hash = hash * 59 + this.GtinQuantity.GetHashCode();
                if (this.ExcludedGtinQuantity != null)
                    hash = hash * 59 + this.ExcludedGtinQuantity.GetHashCode();
                if (this.InUse != null)
                    hash = hash * 59 + this.InUse.GetHashCode();
                if (this.ClientIds != null)
                    hash = hash * 59 + this.ClientIds.GetHashCode();
                if (this.IsComplete != null)
                    hash = hash * 59 + this.IsComplete.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
