/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// SgtinRfidStock
    /// </summary>
    [DataContract]
    public partial class SgtinRfidStock :  IEquatable<SgtinRfidStock>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Disposition
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DispositionEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum CONTAINERCLOSED for "CONTAINER_CLOSED"
            /// </summary>
            [EnumMember(Value = "CONTAINER_CLOSED")]
            CONTAINERCLOSED,
            
            /// <summary>
            /// Enum DAMAGED for "DAMAGED"
            /// </summary>
            [EnumMember(Value = "DAMAGED")]
            DAMAGED,
            
            /// <summary>
            /// Enum DESTROYED for "DESTROYED"
            /// </summary>
            [EnumMember(Value = "DESTROYED")]
            DESTROYED,
            
            /// <summary>
            /// Enum DISPOSED for "DISPOSED"
            /// </summary>
            [EnumMember(Value = "DISPOSED")]
            DISPOSED,
            
            /// <summary>
            /// Enum ENCODED for "ENCODED"
            /// </summary>
            [EnumMember(Value = "ENCODED")]
            ENCODED,
            
            /// <summary>
            /// Enum EXPIRED for "EXPIRED"
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED,
            
            /// <summary>
            /// Enum INACTIVE for "INACTIVE"
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE,
            
            /// <summary>
            /// Enum INPROGRESS for "IN_PROGRESS"
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS,
            
            /// <summary>
            /// Enum INTRANSIT for "IN_TRANSIT"
            /// </summary>
            [EnumMember(Value = "IN_TRANSIT")]
            INTRANSIT,
            
            /// <summary>
            /// Enum MAYBESTOLEN for "MAYBE_STOLEN"
            /// </summary>
            [EnumMember(Value = "MAYBE_STOLEN")]
            MAYBESTOLEN,
            
            /// <summary>
            /// Enum NOPEDIGREEMATCH for "NO_PEDIGREE_MATCH"
            /// </summary>
            [EnumMember(Value = "NO_PEDIGREE_MATCH")]
            NOPEDIGREEMATCH,
            
            /// <summary>
            /// Enum NONSELLABLEEXPIRED for "NON_SELLABLE_EXPIRED"
            /// </summary>
            [EnumMember(Value = "NON_SELLABLE_EXPIRED")]
            NONSELLABLEEXPIRED,
            
            /// <summary>
            /// Enum NONSELLABLEDAMAGED for "NON_SELLABLE_DAMAGED"
            /// </summary>
            [EnumMember(Value = "NON_SELLABLE_DAMAGED")]
            NONSELLABLEDAMAGED,
            
            /// <summary>
            /// Enum NONSELLABLEDISPOSED for "NON_SELLABLE_DISPOSED"
            /// </summary>
            [EnumMember(Value = "NON_SELLABLE_DISPOSED")]
            NONSELLABLEDISPOSED,
            
            /// <summary>
            /// Enum NONSELLABLENOPEDIGREEMATCH for "NON_SELLABLE_NO_PEDIGREE_MATCH"
            /// </summary>
            [EnumMember(Value = "NON_SELLABLE_NO_PEDIGREE_MATCH")]
            NONSELLABLENOPEDIGREEMATCH,
            
            /// <summary>
            /// Enum NONSELLABLEOTHER for "NON_SELLABLE_OTHER"
            /// </summary>
            [EnumMember(Value = "NON_SELLABLE_OTHER")]
            NONSELLABLEOTHER,
            
            /// <summary>
            /// Enum NONSELLABLERECALLED for "NON_SELLABLE_RECALLED"
            /// </summary>
            [EnumMember(Value = "NON_SELLABLE_RECALLED")]
            NONSELLABLERECALLED,
            
            /// <summary>
            /// Enum RECALLED for "RECALLED"
            /// </summary>
            [EnumMember(Value = "RECALLED")]
            RECALLED,
            
            /// <summary>
            /// Enum RESERVED for "RESERVED"
            /// </summary>
            [EnumMember(Value = "RESERVED")]
            RESERVED,
            
            /// <summary>
            /// Enum RETAILSOLD for "RETAIL_SOLD"
            /// </summary>
            [EnumMember(Value = "RETAIL_SOLD")]
            RETAILSOLD,
            
            /// <summary>
            /// Enum RETURNED for "RETURNED"
            /// </summary>
            [EnumMember(Value = "RETURNED")]
            RETURNED,
            
            /// <summary>
            /// Enum SELLABLEACCESSIBLE for "SELLABLE_ACCESSIBLE"
            /// </summary>
            [EnumMember(Value = "SELLABLE_ACCESSIBLE")]
            SELLABLEACCESSIBLE,
            
            /// <summary>
            /// Enum SELLABLENOTACCESSIBLE for "SELLABLE_NOT_ACCESSIBLE"
            /// </summary>
            [EnumMember(Value = "SELLABLE_NOT_ACCESSIBLE")]
            SELLABLENOTACCESSIBLE,
            
            /// <summary>
            /// Enum STOLEN for "STOLEN"
            /// </summary>
            [EnumMember(Value = "STOLEN")]
            STOLEN,
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN
        }

        /// <summary>
        /// Gets or Sets Disposition
        /// </summary>
        [DataMember(Name="disposition", EmitDefaultValue=false)]
        public DispositionEnum? Disposition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SgtinRfidStock" /> class.
        /// </summary>
        /// <param name="Location">Location.</param>
        /// <param name="Time">Time.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="Sgtins">Sgtins.</param>
        /// <param name="Disposition">Disposition.</param>
        public SgtinRfidStock(string Location = default(string), DateTime? Time = default(DateTime?), int? Quantity = default(int?), List<string> Sgtins = default(List<string>), DispositionEnum? Disposition = default(DispositionEnum?))
        {
            this.Location = Location;
            this.Time = Time;
            this.Quantity = Quantity;
            this.Sgtins = Sgtins;
            this.Disposition = Disposition;
        }
        
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime? Time { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Sgtins
        /// </summary>
        [DataMember(Name="sgtins", EmitDefaultValue=false)]
        public List<string> Sgtins { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SgtinRfidStock {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Sgtins: ").Append(Sgtins).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SgtinRfidStock);
        }

        /// <summary>
        /// Returns true if SgtinRfidStock instances are equal
        /// </summary>
        /// <param name="other">Instance of SgtinRfidStock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SgtinRfidStock other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Sgtins == other.Sgtins ||
                    this.Sgtins != null &&
                    this.Sgtins.SequenceEqual(other.Sgtins)
                ) && 
                (
                    this.Disposition == other.Disposition ||
                    this.Disposition != null &&
                    this.Disposition.Equals(other.Disposition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Sgtins != null)
                    hash = hash * 59 + this.Sgtins.GetHashCode();
                if (this.Disposition != null)
                    hash = hash * 59 + this.Disposition.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
