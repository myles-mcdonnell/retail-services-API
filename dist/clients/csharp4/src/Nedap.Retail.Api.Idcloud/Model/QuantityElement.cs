/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// A QuantityElement is a structure that identifies a specific quantity of objects identified by a specific class-level identifier.
    /// </summary>
    [DataContract]
    public partial class QuantityElement :  IEquatable<QuantityElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantityElement" /> class.
        /// </summary>
        /// <param name="Quantity">See EPCIS version 1.1.</param>
        /// <param name="Uom">See EPCIS version 1.1.</param>
        /// <param name="EpcClass">See EPCIS version 1.1.</param>
        public QuantityElement(decimal? Quantity = default(decimal?), string Uom = default(string), string EpcClass = default(string))
        {
            this.Quantity = Quantity;
            this.Uom = Uom;
            this.EpcClass = EpcClass;
        }
        
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="uom", EmitDefaultValue=false)]
        public string Uom { get; set; }
        /// <summary>
        /// See EPCIS version 1.1
        /// </summary>
        /// <value>See EPCIS version 1.1</value>
        [DataMember(Name="epc_class", EmitDefaultValue=false)]
        public string EpcClass { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuantityElement {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("  EpcClass: ").Append(EpcClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as QuantityElement);
        }

        /// <summary>
        /// Returns true if QuantityElement instances are equal
        /// </summary>
        /// <param name="other">Instance of QuantityElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuantityElement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Uom == other.Uom ||
                    this.Uom != null &&
                    this.Uom.Equals(other.Uom)
                ) && 
                (
                    this.EpcClass == other.EpcClass ||
                    this.EpcClass != null &&
                    this.EpcClass.Equals(other.EpcClass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Uom != null)
                    hash = hash * 59 + this.Uom.GetHashCode();
                if (this.EpcClass != null)
                    hash = hash * 59 + this.EpcClass.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
