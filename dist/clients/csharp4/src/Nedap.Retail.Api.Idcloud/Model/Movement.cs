/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// Movement
    /// </summary>
    [DataContract]
    public partial class Movement :  IEquatable<Movement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Movement" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="To">To.</param>
        /// <param name="From">From.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="Unregistered">Unregistered (default to false).</param>
        /// <param name="Gtins">Gtins.</param>
        /// <param name="Quantities">Quantities.</param>
        /// <param name="Articles">Articles.</param>
        /// <param name="EventTime">EventTime.</param>
        /// <param name="GtinQuantity">GtinQuantity.</param>
        public Movement(string Id = default(string), string To = default(string), string From = default(string), int? Quantity = default(int?), bool? Unregistered = false, List<string> Gtins = default(List<string>), List<int?> Quantities = default(List<int?>), List<Article> Articles = default(List<Article>), DateTime? EventTime = default(DateTime?), int? GtinQuantity = default(int?))
        {
            this.Id = Id;
            this.To = To;
            this.From = From;
            this.Quantity = Quantity;
            // use default value if no "Unregistered" provided
            if (Unregistered == null)
            {
                this.Unregistered = false;
            }
            else
            {
                this.Unregistered = Unregistered;
            }
            this.Gtins = Gtins;
            this.Quantities = Quantities;
            this.Articles = Articles;
            this.EventTime = EventTime;
            this.GtinQuantity = GtinQuantity;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }
        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Unregistered
        /// </summary>
        [DataMember(Name="unregistered", EmitDefaultValue=false)]
        public bool? Unregistered { get; set; }
        /// <summary>
        /// Gets or Sets Gtins
        /// </summary>
        [DataMember(Name="gtins", EmitDefaultValue=false)]
        public List<string> Gtins { get; set; }
        /// <summary>
        /// Gets or Sets Quantities
        /// </summary>
        [DataMember(Name="quantities", EmitDefaultValue=false)]
        public List<int?> Quantities { get; set; }
        /// <summary>
        /// Gets or Sets Articles
        /// </summary>
        [DataMember(Name="articles", EmitDefaultValue=false)]
        public List<Article> Articles { get; set; }
        /// <summary>
        /// Gets or Sets EventTime
        /// </summary>
        [DataMember(Name="event_time", EmitDefaultValue=false)]
        public DateTime? EventTime { get; set; }
        /// <summary>
        /// Gets or Sets GtinQuantity
        /// </summary>
        [DataMember(Name="gtin_quantity", EmitDefaultValue=false)]
        public int? GtinQuantity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Movement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Unregistered: ").Append(Unregistered).Append("\n");
            sb.Append("  Gtins: ").Append(Gtins).Append("\n");
            sb.Append("  Quantities: ").Append(Quantities).Append("\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  GtinQuantity: ").Append(GtinQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Movement);
        }

        /// <summary>
        /// Returns true if Movement instances are equal
        /// </summary>
        /// <param name="other">Instance of Movement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Movement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.Equals(other.To)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Unregistered == other.Unregistered ||
                    this.Unregistered != null &&
                    this.Unregistered.Equals(other.Unregistered)
                ) && 
                (
                    this.Gtins == other.Gtins ||
                    this.Gtins != null &&
                    this.Gtins.SequenceEqual(other.Gtins)
                ) && 
                (
                    this.Quantities == other.Quantities ||
                    this.Quantities != null &&
                    this.Quantities.SequenceEqual(other.Quantities)
                ) && 
                (
                    this.Articles == other.Articles ||
                    this.Articles != null &&
                    this.Articles.SequenceEqual(other.Articles)
                ) && 
                (
                    this.EventTime == other.EventTime ||
                    this.EventTime != null &&
                    this.EventTime.Equals(other.EventTime)
                ) && 
                (
                    this.GtinQuantity == other.GtinQuantity ||
                    this.GtinQuantity != null &&
                    this.GtinQuantity.Equals(other.GtinQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Unregistered != null)
                    hash = hash * 59 + this.Unregistered.GetHashCode();
                if (this.Gtins != null)
                    hash = hash * 59 + this.Gtins.GetHashCode();
                if (this.Quantities != null)
                    hash = hash * 59 + this.Quantities.GetHashCode();
                if (this.Articles != null)
                    hash = hash * 59 + this.Articles.GetHashCode();
                if (this.EventTime != null)
                    hash = hash * 59 + this.EventTime.GetHashCode();
                if (this.GtinQuantity != null)
                    hash = hash * 59 + this.GtinQuantity.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
