/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// StockResponse
    /// </summary>
    [DataContract]
    public partial class StockResponse :  IEquatable<StockResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockResponse" /> class.
        /// </summary>
        /// <param name="Generated">Generated.</param>
        /// <param name="Gtins">Gtins.</param>
        /// <param name="Locations">Locations.</param>
        /// <param name="Quantities">Quantities.</param>
        /// <param name="Time">Time.</param>
        /// <param name="Articles">Articles.</param>
        /// <param name="RfidStockTime">RfidStockTime.</param>
        /// <param name="RfidStockStartTime">RfidStockStartTime.</param>
        /// <param name="StockRoomsQuantity">StockRoomsQuantity.</param>
        /// <param name="SalesFloorsQuantity">SalesFloorsQuantity.</param>
        /// <param name="StoreQuantity">StoreQuantity.</param>
        /// <param name="StockRatio">StockRatio.</param>
        /// <param name="ClientIds">ClientIds.</param>
        public StockResponse(DateTime? Generated = default(DateTime?), List<string> Gtins = default(List<string>), List<string> Locations = default(List<string>), List<int?> Quantities = default(List<int?>), DateTime? Time = default(DateTime?), List<Article> Articles = default(List<Article>), DateTime? RfidStockTime = default(DateTime?), DateTime? RfidStockStartTime = default(DateTime?), int? StockRoomsQuantity = default(int?), int? SalesFloorsQuantity = default(int?), int? StoreQuantity = default(int?), double? StockRatio = default(double?), List<string> ClientIds = default(List<string>))
        {
            this.Generated = Generated;
            this.Gtins = Gtins;
            this.Locations = Locations;
            this.Quantities = Quantities;
            this.Time = Time;
            this.Articles = Articles;
            this.RfidStockTime = RfidStockTime;
            this.RfidStockStartTime = RfidStockStartTime;
            this.StockRoomsQuantity = StockRoomsQuantity;
            this.SalesFloorsQuantity = SalesFloorsQuantity;
            this.StoreQuantity = StoreQuantity;
            this.StockRatio = StockRatio;
            this.ClientIds = ClientIds;
        }
        
        /// <summary>
        /// Gets or Sets Generated
        /// </summary>
        [DataMember(Name="generated", EmitDefaultValue=false)]
        public DateTime? Generated { get; set; }
        /// <summary>
        /// Gets or Sets Gtins
        /// </summary>
        [DataMember(Name="gtins", EmitDefaultValue=false)]
        public List<string> Gtins { get; set; }
        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name="locations", EmitDefaultValue=false)]
        public List<string> Locations { get; set; }
        /// <summary>
        /// Gets or Sets Quantities
        /// </summary>
        [DataMember(Name="quantities", EmitDefaultValue=false)]
        public List<int?> Quantities { get; set; }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime? Time { get; set; }
        /// <summary>
        /// Gets or Sets Articles
        /// </summary>
        [DataMember(Name="articles", EmitDefaultValue=false)]
        public List<Article> Articles { get; set; }
        /// <summary>
        /// Gets or Sets RfidStockTime
        /// </summary>
        [DataMember(Name="rfid_stock_time", EmitDefaultValue=false)]
        public DateTime? RfidStockTime { get; set; }
        /// <summary>
        /// Gets or Sets RfidStockStartTime
        /// </summary>
        [DataMember(Name="rfid_stock_start_time", EmitDefaultValue=false)]
        public DateTime? RfidStockStartTime { get; set; }
        /// <summary>
        /// Gets or Sets StockRoomsQuantity
        /// </summary>
        [DataMember(Name="stock_rooms_quantity", EmitDefaultValue=false)]
        public int? StockRoomsQuantity { get; set; }
        /// <summary>
        /// Gets or Sets SalesFloorsQuantity
        /// </summary>
        [DataMember(Name="sales_floors_quantity", EmitDefaultValue=false)]
        public int? SalesFloorsQuantity { get; set; }
        /// <summary>
        /// Gets or Sets StoreQuantity
        /// </summary>
        [DataMember(Name="store_quantity", EmitDefaultValue=false)]
        public int? StoreQuantity { get; set; }
        /// <summary>
        /// Gets or Sets StockRatio
        /// </summary>
        [DataMember(Name="stock_ratio", EmitDefaultValue=false)]
        public double? StockRatio { get; set; }
        /// <summary>
        /// Gets or Sets ClientIds
        /// </summary>
        [DataMember(Name="client_ids", EmitDefaultValue=false)]
        public List<string> ClientIds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StockResponse {\n");
            sb.Append("  Generated: ").Append(Generated).Append("\n");
            sb.Append("  Gtins: ").Append(Gtins).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  Quantities: ").Append(Quantities).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("  RfidStockTime: ").Append(RfidStockTime).Append("\n");
            sb.Append("  RfidStockStartTime: ").Append(RfidStockStartTime).Append("\n");
            sb.Append("  StockRoomsQuantity: ").Append(StockRoomsQuantity).Append("\n");
            sb.Append("  SalesFloorsQuantity: ").Append(SalesFloorsQuantity).Append("\n");
            sb.Append("  StoreQuantity: ").Append(StoreQuantity).Append("\n");
            sb.Append("  StockRatio: ").Append(StockRatio).Append("\n");
            sb.Append("  ClientIds: ").Append(ClientIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StockResponse);
        }

        /// <summary>
        /// Returns true if StockResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of StockResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Generated == other.Generated ||
                    this.Generated != null &&
                    this.Generated.Equals(other.Generated)
                ) && 
                (
                    this.Gtins == other.Gtins ||
                    this.Gtins != null &&
                    this.Gtins.SequenceEqual(other.Gtins)
                ) && 
                (
                    this.Locations == other.Locations ||
                    this.Locations != null &&
                    this.Locations.SequenceEqual(other.Locations)
                ) && 
                (
                    this.Quantities == other.Quantities ||
                    this.Quantities != null &&
                    this.Quantities.SequenceEqual(other.Quantities)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Articles == other.Articles ||
                    this.Articles != null &&
                    this.Articles.SequenceEqual(other.Articles)
                ) && 
                (
                    this.RfidStockTime == other.RfidStockTime ||
                    this.RfidStockTime != null &&
                    this.RfidStockTime.Equals(other.RfidStockTime)
                ) && 
                (
                    this.RfidStockStartTime == other.RfidStockStartTime ||
                    this.RfidStockStartTime != null &&
                    this.RfidStockStartTime.Equals(other.RfidStockStartTime)
                ) && 
                (
                    this.StockRoomsQuantity == other.StockRoomsQuantity ||
                    this.StockRoomsQuantity != null &&
                    this.StockRoomsQuantity.Equals(other.StockRoomsQuantity)
                ) && 
                (
                    this.SalesFloorsQuantity == other.SalesFloorsQuantity ||
                    this.SalesFloorsQuantity != null &&
                    this.SalesFloorsQuantity.Equals(other.SalesFloorsQuantity)
                ) && 
                (
                    this.StoreQuantity == other.StoreQuantity ||
                    this.StoreQuantity != null &&
                    this.StoreQuantity.Equals(other.StoreQuantity)
                ) && 
                (
                    this.StockRatio == other.StockRatio ||
                    this.StockRatio != null &&
                    this.StockRatio.Equals(other.StockRatio)
                ) && 
                (
                    this.ClientIds == other.ClientIds ||
                    this.ClientIds != null &&
                    this.ClientIds.SequenceEqual(other.ClientIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Generated != null)
                    hash = hash * 59 + this.Generated.GetHashCode();
                if (this.Gtins != null)
                    hash = hash * 59 + this.Gtins.GetHashCode();
                if (this.Locations != null)
                    hash = hash * 59 + this.Locations.GetHashCode();
                if (this.Quantities != null)
                    hash = hash * 59 + this.Quantities.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Articles != null)
                    hash = hash * 59 + this.Articles.GetHashCode();
                if (this.RfidStockTime != null)
                    hash = hash * 59 + this.RfidStockTime.GetHashCode();
                if (this.RfidStockStartTime != null)
                    hash = hash * 59 + this.RfidStockStartTime.GetHashCode();
                if (this.StockRoomsQuantity != null)
                    hash = hash * 59 + this.StockRoomsQuantity.GetHashCode();
                if (this.SalesFloorsQuantity != null)
                    hash = hash * 59 + this.SalesFloorsQuantity.GetHashCode();
                if (this.StoreQuantity != null)
                    hash = hash * 59 + this.StoreQuantity.GetHashCode();
                if (this.StockRatio != null)
                    hash = hash * 59 + this.StockRatio.GetHashCode();
                if (this.ClientIds != null)
                    hash = hash * 59 + this.ClientIds.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
