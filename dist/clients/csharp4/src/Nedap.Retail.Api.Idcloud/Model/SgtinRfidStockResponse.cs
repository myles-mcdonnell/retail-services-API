/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// SgtinRfidStockResponse
    /// </summary>
    [DataContract]
    public partial class SgtinRfidStockResponse :  IEquatable<SgtinRfidStockResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SgtinRfidStockResponse" /> class.
        /// </summary>
        /// <param name="Stocks">Stocks.</param>
        public SgtinRfidStockResponse(List<SgtinRfidStock> Stocks = default(List<SgtinRfidStock>))
        {
            this.Stocks = Stocks;
        }
        
        /// <summary>
        /// Gets or Sets Stocks
        /// </summary>
        [DataMember(Name="stocks", EmitDefaultValue=false)]
        public List<SgtinRfidStock> Stocks { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SgtinRfidStockResponse {\n");
            sb.Append("  Stocks: ").Append(Stocks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SgtinRfidStockResponse);
        }

        /// <summary>
        /// Returns true if SgtinRfidStockResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SgtinRfidStockResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SgtinRfidStockResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Stocks == other.Stocks ||
                    this.Stocks != null &&
                    this.Stocks.SequenceEqual(other.Stocks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Stocks != null)
                    hash = hash * 59 + this.Stocks.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
