/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// ApprovedDifferenceListCaptureRequest
    /// </summary>
    [DataContract]
    public partial class ApprovedDifferenceListCaptureRequest :  IEquatable<ApprovedDifferenceListCaptureRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovedDifferenceListCaptureRequest" /> class.
        /// </summary>
        /// <param name="Location">Location.</param>
        /// <param name="RfidTime">RfidTime.</param>
        /// <param name="ErpStockId">ErpStockId.</param>
        /// <param name="ApprovedGtins">ApprovedGtins.</param>
        public ApprovedDifferenceListCaptureRequest(string Location = default(string), DateTime? RfidTime = default(DateTime?), string ErpStockId = default(string), List<string> ApprovedGtins = default(List<string>))
        {
            this.Location = Location;
            this.RfidTime = RfidTime;
            this.ErpStockId = ErpStockId;
            this.ApprovedGtins = ApprovedGtins;
        }
        
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Gets or Sets RfidTime
        /// </summary>
        [DataMember(Name="rfid_time", EmitDefaultValue=false)]
        public DateTime? RfidTime { get; set; }
        /// <summary>
        /// Gets or Sets ErpStockId
        /// </summary>
        [DataMember(Name="erp_stock_id", EmitDefaultValue=false)]
        public string ErpStockId { get; set; }
        /// <summary>
        /// Gets or Sets ApprovedGtins
        /// </summary>
        [DataMember(Name="approved_gtins", EmitDefaultValue=false)]
        public List<string> ApprovedGtins { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApprovedDifferenceListCaptureRequest {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RfidTime: ").Append(RfidTime).Append("\n");
            sb.Append("  ErpStockId: ").Append(ErpStockId).Append("\n");
            sb.Append("  ApprovedGtins: ").Append(ApprovedGtins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ApprovedDifferenceListCaptureRequest);
        }

        /// <summary>
        /// Returns true if ApprovedDifferenceListCaptureRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApprovedDifferenceListCaptureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovedDifferenceListCaptureRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.RfidTime == other.RfidTime ||
                    this.RfidTime != null &&
                    this.RfidTime.Equals(other.RfidTime)
                ) && 
                (
                    this.ErpStockId == other.ErpStockId ||
                    this.ErpStockId != null &&
                    this.ErpStockId.Equals(other.ErpStockId)
                ) && 
                (
                    this.ApprovedGtins == other.ApprovedGtins ||
                    this.ApprovedGtins != null &&
                    this.ApprovedGtins.SequenceEqual(other.ApprovedGtins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.RfidTime != null)
                    hash = hash * 59 + this.RfidTime.GetHashCode();
                if (this.ErpStockId != null)
                    hash = hash * 59 + this.ErpStockId.GetHashCode();
                if (this.ApprovedGtins != null)
                    hash = hash * 59 + this.ApprovedGtins.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
