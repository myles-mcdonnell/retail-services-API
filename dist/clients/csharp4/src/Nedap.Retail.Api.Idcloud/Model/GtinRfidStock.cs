/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// GtinRfidStock
    /// </summary>
    [DataContract]
    public partial class GtinRfidStock :  IEquatable<GtinRfidStock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GtinRfidStock" /> class.
        /// </summary>
        /// <param name="Location">Location.</param>
        /// <param name="Time">Time.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="Gtins">Gtins.</param>
        /// <param name="Quantities">Quantities.</param>
        /// <param name="Articles">Articles.</param>
        /// <param name="GtinQuantity">GtinQuantity.</param>
        public GtinRfidStock(string Location = default(string), DateTime? Time = default(DateTime?), int? Quantity = default(int?), List<string> Gtins = default(List<string>), List<int?> Quantities = default(List<int?>), List<Article> Articles = default(List<Article>), int? GtinQuantity = default(int?))
        {
            this.Location = Location;
            this.Time = Time;
            this.Quantity = Quantity;
            this.Gtins = Gtins;
            this.Quantities = Quantities;
            this.Articles = Articles;
            this.GtinQuantity = GtinQuantity;
        }
        
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime? Time { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Gtins
        /// </summary>
        [DataMember(Name="gtins", EmitDefaultValue=false)]
        public List<string> Gtins { get; set; }
        /// <summary>
        /// Gets or Sets Quantities
        /// </summary>
        [DataMember(Name="quantities", EmitDefaultValue=false)]
        public List<int?> Quantities { get; set; }
        /// <summary>
        /// Gets or Sets Articles
        /// </summary>
        [DataMember(Name="articles", EmitDefaultValue=false)]
        public List<Article> Articles { get; set; }
        /// <summary>
        /// Gets or Sets GtinQuantity
        /// </summary>
        [DataMember(Name="gtin_quantity", EmitDefaultValue=false)]
        public int? GtinQuantity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GtinRfidStock {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Gtins: ").Append(Gtins).Append("\n");
            sb.Append("  Quantities: ").Append(Quantities).Append("\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("  GtinQuantity: ").Append(GtinQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GtinRfidStock);
        }

        /// <summary>
        /// Returns true if GtinRfidStock instances are equal
        /// </summary>
        /// <param name="other">Instance of GtinRfidStock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GtinRfidStock other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Gtins == other.Gtins ||
                    this.Gtins != null &&
                    this.Gtins.SequenceEqual(other.Gtins)
                ) && 
                (
                    this.Quantities == other.Quantities ||
                    this.Quantities != null &&
                    this.Quantities.SequenceEqual(other.Quantities)
                ) && 
                (
                    this.Articles == other.Articles ||
                    this.Articles != null &&
                    this.Articles.SequenceEqual(other.Articles)
                ) && 
                (
                    this.GtinQuantity == other.GtinQuantity ||
                    this.GtinQuantity != null &&
                    this.GtinQuantity.Equals(other.GtinQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Gtins != null)
                    hash = hash * 59 + this.Gtins.GetHashCode();
                if (this.Quantities != null)
                    hash = hash * 59 + this.Quantities.GetHashCode();
                if (this.Articles != null)
                    hash = hash * 59 + this.Articles.GetHashCode();
                if (this.GtinQuantity != null)
                    hash = hash * 59 + this.GtinQuantity.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
