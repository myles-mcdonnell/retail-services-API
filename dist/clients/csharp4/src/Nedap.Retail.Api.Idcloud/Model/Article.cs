/* 
 * !D Cloud API
 *
 * !D Cloud is an RFID integration platform for retail stores. While we                                         provide core functionality for retail companies, a lot of functionality can be                                         added or extended by 3rd party developers. We encourage you to do so!
 *
 * OpenAPI spec version: v1
 * Contact: info@nedap-idcloud.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Nedap.Retail.Api.Idcloud.Model
{
    /// <summary>
    /// Article
    /// </summary>
    [DataContract]
    public partial class Article :  IEquatable<Article>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Article" /> class.
        /// </summary>
        /// <param name="Gtin">Gtin.</param>
        /// <param name="Barcodes">Barcodes.</param>
        /// <param name="Code">Code.</param>
        /// <param name="Brand">Brand.</param>
        /// <param name="Season">Season.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Option">Option.</param>
        /// <param name="Style">Style.</param>
        /// <param name="Color">Color.</param>
        /// <param name="Sizes">Sizes.</param>
        /// <param name="Supplier">Supplier.</param>
        /// <param name="Category">Category.</param>
        /// <param name="Prices">Prices.</param>
        /// <param name="LastUpdated">LastUpdated.</param>
        public Article(string Gtin = default(string), List<Barcode> Barcodes = default(List<Barcode>), string Code = default(string), string Brand = default(string), string Season = default(string), string Name = default(string), string Option = default(string), string Style = default(string), string Color = default(string), List<Size> Sizes = default(List<Size>), string Supplier = default(string), string Category = default(string), List<Price> Prices = default(List<Price>), DateTime? LastUpdated = default(DateTime?))
        {
            this.Gtin = Gtin;
            this.Barcodes = Barcodes;
            this.Code = Code;
            this.Brand = Brand;
            this.Season = Season;
            this.Name = Name;
            this.Option = Option;
            this.Style = Style;
            this.Color = Color;
            this.Sizes = Sizes;
            this.Supplier = Supplier;
            this.Category = Category;
            this.Prices = Prices;
            this.LastUpdated = LastUpdated;
        }
        
        /// <summary>
        /// Gets or Sets Gtin
        /// </summary>
        [DataMember(Name="gtin", EmitDefaultValue=false)]
        public string Gtin { get; set; }
        /// <summary>
        /// Gets or Sets Barcodes
        /// </summary>
        [DataMember(Name="barcodes", EmitDefaultValue=false)]
        public List<Barcode> Barcodes { get; set; }
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }
        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name="season", EmitDefaultValue=false)]
        public string Season { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Option
        /// </summary>
        [DataMember(Name="option", EmitDefaultValue=false)]
        public string Option { get; set; }
        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public string Style { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }
        /// <summary>
        /// Gets or Sets Sizes
        /// </summary>
        [DataMember(Name="sizes", EmitDefaultValue=false)]
        public List<Size> Sizes { get; set; }
        /// <summary>
        /// Gets or Sets Supplier
        /// </summary>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name="prices", EmitDefaultValue=false)]
        public List<Price> Prices { get; set; }
        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name="last_updated", EmitDefaultValue=false)]
        public DateTime? LastUpdated { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Article {\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Barcodes: ").Append(Barcodes).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Option: ").Append(Option).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Sizes: ").Append(Sizes).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Article);
        }

        /// <summary>
        /// Returns true if Article instances are equal
        /// </summary>
        /// <param name="other">Instance of Article to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Article other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Gtin == other.Gtin ||
                    this.Gtin != null &&
                    this.Gtin.Equals(other.Gtin)
                ) && 
                (
                    this.Barcodes == other.Barcodes ||
                    this.Barcodes != null &&
                    this.Barcodes.SequenceEqual(other.Barcodes)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Brand == other.Brand ||
                    this.Brand != null &&
                    this.Brand.Equals(other.Brand)
                ) && 
                (
                    this.Season == other.Season ||
                    this.Season != null &&
                    this.Season.Equals(other.Season)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Option == other.Option ||
                    this.Option != null &&
                    this.Option.Equals(other.Option)
                ) && 
                (
                    this.Style == other.Style ||
                    this.Style != null &&
                    this.Style.Equals(other.Style)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.Sizes == other.Sizes ||
                    this.Sizes != null &&
                    this.Sizes.SequenceEqual(other.Sizes)
                ) && 
                (
                    this.Supplier == other.Supplier ||
                    this.Supplier != null &&
                    this.Supplier.Equals(other.Supplier)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Prices == other.Prices ||
                    this.Prices != null &&
                    this.Prices.SequenceEqual(other.Prices)
                ) && 
                (
                    this.LastUpdated == other.LastUpdated ||
                    this.LastUpdated != null &&
                    this.LastUpdated.Equals(other.LastUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Gtin != null)
                    hash = hash * 59 + this.Gtin.GetHashCode();
                if (this.Barcodes != null)
                    hash = hash * 59 + this.Barcodes.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Brand != null)
                    hash = hash * 59 + this.Brand.GetHashCode();
                if (this.Season != null)
                    hash = hash * 59 + this.Season.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Option != null)
                    hash = hash * 59 + this.Option.GetHashCode();
                if (this.Style != null)
                    hash = hash * 59 + this.Style.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.Sizes != null)
                    hash = hash * 59 + this.Sizes.GetHashCode();
                if (this.Supplier != null)
                    hash = hash * 59 + this.Supplier.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Prices != null)
                    hash = hash * 59 + this.Prices.GetHashCode();
                if (this.LastUpdated != null)
                    hash = hash * 59 + this.LastUpdated.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
